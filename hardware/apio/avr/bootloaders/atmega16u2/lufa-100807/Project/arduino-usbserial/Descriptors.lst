   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /* On some devices, there is a factory set internal serial number which can be automatically sent t
  41:Descriptors.c ****  * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_I
  42:Descriptors.c ****  * This allows the host to track a device across insertions on different ports, allowing them to re
  43:Descriptors.c ****  * resources like COM port numbers and drivers. On demos using this feature, give a warning on unsu
  44:Descriptors.c ****  * so that the user can supply their own serial number descriptor instead or remove the USE_INTERNA
  45:Descriptors.c ****  * from the Device Descriptor (forcing the host to generate a serial number for each device from th
  46:Descriptors.c ****  * port location).
  47:Descriptors.c ****  */
  48:Descriptors.c **** #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  49:Descriptors.c **** 	#warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device ser
  50:Descriptors.c **** #endif
  51:Descriptors.c **** 
  52:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  53:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  54:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  55:Descriptors.c ****  *  process begins.
  56:Descriptors.c ****  */
  57:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  58:Descriptors.c **** {
  59:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  60:Descriptors.c **** 		
  61:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  62:Descriptors.c **** 	.Class                  = 0x02,
  63:Descriptors.c **** 	.SubClass               = 0x00,
  64:Descriptors.c **** 	.Protocol               = 0x00,
  65:Descriptors.c **** 				
  66:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  67:Descriptors.c **** 		
  68:Descriptors.c **** 	.VendorID               = 0x03EB, // Pinoccio
  69:Descriptors.c **** 	.ProductID          	  = 0x6052, // Pinoccio USB-to-serial programmer
  70:Descriptors.c **** 	.ReleaseNumber          = 0x0001,
  71:Descriptors.c **** 		
  72:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  73:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  74:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  75:Descriptors.c **** 		
  76:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  77:Descriptors.c **** };
  78:Descriptors.c **** 
  79:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  80:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  81:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  82:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  83:Descriptors.c ****  */
  84:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  85:Descriptors.c **** {
  86:Descriptors.c **** 	.Config = 
  87:Descriptors.c **** 		{
  88:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  89:Descriptors.c **** 
  90:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  91:Descriptors.c **** 			.TotalInterfaces        = 2,
  92:Descriptors.c **** 				
  93:Descriptors.c **** 			.ConfigurationNumber    = 1,
  94:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  95:Descriptors.c **** 				
  96:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  97:Descriptors.c **** 			
  98:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(500)
  99:Descriptors.c **** 		},
 100:Descriptors.c **** 		
 101:Descriptors.c **** 	.CDC_CCI_Interface = 
 102:Descriptors.c **** 		{
 103:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 104:Descriptors.c **** 
 105:Descriptors.c **** 			.InterfaceNumber        = 0,
 106:Descriptors.c **** 			.AlternateSetting       = 0,
 107:Descriptors.c **** 			
 108:Descriptors.c **** 			.TotalEndpoints         = 1,
 109:Descriptors.c **** 				
 110:Descriptors.c **** 			.Class                  = 0x02,
 111:Descriptors.c **** 			.SubClass               = 0x02,
 112:Descriptors.c **** 			.Protocol               = 0x01,
 113:Descriptors.c **** 				
 114:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 115:Descriptors.c **** 		},
 116:Descriptors.c **** 
 117:Descriptors.c **** 	.CDC_Functional_IntHeader = 
 118:Descriptors.c **** 		{
 119:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 120:Descriptors.c **** 			.SubType                = 0x00,
 121:Descriptors.c **** 			
 122:Descriptors.c **** 			.Data                   = {0x01, 0x10}
 123:Descriptors.c **** 		},
 124:Descriptors.c **** 
 125:Descriptors.c **** 	.CDC_Functional_AbstractControlManagement = 
 126:Descriptors.c **** 		{
 127:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(1)), .Type = 0x24},
 128:Descriptors.c **** 			.SubType                = 0x02,
 129:Descriptors.c **** 			
 130:Descriptors.c **** 			.Data                   = {0x06}
 131:Descriptors.c **** 		},
 132:Descriptors.c **** 		
 133:Descriptors.c **** 	.CDC_Functional_Union = 
 134:Descriptors.c **** 		{
 135:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 136:Descriptors.c **** 			.SubType                = 0x06,
 137:Descriptors.c **** 			
 138:Descriptors.c **** 			.Data                   = {0x00, 0x01}
 139:Descriptors.c **** 		},
 140:Descriptors.c **** 
 141:Descriptors.c **** 	.CDC_NotificationEndpoint = 
 142:Descriptors.c **** 		{
 143:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 144:Descriptors.c **** 			
 145:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 146:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 147:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 148:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 149:Descriptors.c **** 		},
 150:Descriptors.c **** 
 151:Descriptors.c **** 	.CDC_DCI_Interface = 
 152:Descriptors.c **** 		{
 153:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 154:Descriptors.c **** 
 155:Descriptors.c **** 			.InterfaceNumber        = 1,
 156:Descriptors.c **** 			.AlternateSetting       = 0,
 157:Descriptors.c **** 			
 158:Descriptors.c **** 			.TotalEndpoints         = 2,
 159:Descriptors.c **** 				
 160:Descriptors.c **** 			.Class                  = 0x0A,
 161:Descriptors.c **** 			.SubClass               = 0x00,
 162:Descriptors.c **** 			.Protocol               = 0x00,
 163:Descriptors.c **** 				
 164:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 165:Descriptors.c **** 		},
 166:Descriptors.c **** 
 167:Descriptors.c **** 	.CDC_DataOutEndpoint = 
 168:Descriptors.c **** 		{
 169:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 170:Descriptors.c **** 			
 171:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 172:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 173:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 174:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 175:Descriptors.c **** 		},
 176:Descriptors.c **** 		
 177:Descriptors.c **** 	.CDC_DataInEndpoint = 
 178:Descriptors.c **** 		{
 179:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 180:Descriptors.c **** 			
 181:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 182:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 183:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 184:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 185:Descriptors.c **** 		}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 189:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 190:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 195:Descriptors.c **** 		
 196:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 197:Descriptors.c **** };
 198:Descriptors.c **** 
 199:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 200:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 201:Descriptors.c ****  *  Descriptor.
 202:Descriptors.c ****  */
 203:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 204:Descriptors.c **** {
 205:Descriptors.c ****   #if (ARDUINO_MODEL_PID == PINOCCIO_PID)
 206:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(27), .Type = DTYPE_String},
 207:Descriptors.c **** 
 208:Descriptors.c ****   	.UnicodeString          = L"Apio (http://apio.cc)"
 209:Descriptors.c **** 	#else
 210:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(24), .Type = DTYPE_String},
 211:Descriptors.c **** 
 212:Descriptors.c ****   	.UnicodeString          = L"Apio manufacturer (www.apio.cc)"
 213:Descriptors.c **** 	#endif
 214:Descriptors.c **** };
 215:Descriptors.c **** 
 216:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 217:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 218:Descriptors.c ****  *  Descriptor.
 219:Descriptors.c ****  */
 220:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 221:Descriptors.c **** {
 222:Descriptors.c **** 	#if (ARDUINO_MODEL_PID == ARDUINO_UNO_PID)
 223:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 224:Descriptors.c **** 			
 225:Descriptors.c **** 		.UnicodeString          = L"Arduino Uno"
 226:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == ARDUINO_MEGA2560_PID)
 227:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 228:Descriptors.c **** 			
 229:Descriptors.c **** 		.UnicodeString          = L"Arduino Mega 2560"
 230:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == PINOCCIO_PID)
 231:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(8), .Type = DTYPE_String},
 232:Descriptors.c **** 
 233:Descriptors.c **** 		.UnicodeString          = L"Apio Dongle"
 234:Descriptors.c **** 	#endif
 235:Descriptors.c **** 	
 236:Descriptors.c **** };
 237:Descriptors.c **** 
 238:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 239:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 240:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 241:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 242:Descriptors.c ****  *  USB host.
 243:Descriptors.c ****  */
 244:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 245:Descriptors.c ****                                     const uint8_t wIndex,
 246:Descriptors.c ****                                     void** const DescriptorAddress)
 247:Descriptors.c **** {
  16               		.loc 1 247 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 248:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 248 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 249:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 250:Descriptors.c **** 
 251:Descriptors.c **** 	void*    Address = NULL;
 252:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 253:Descriptors.c **** 
 254:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 254 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L11
 255:Descriptors.c **** 	{
 256:Descriptors.c **** 		case DTYPE_Device: 
 257:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 258:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 258 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 257:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
  40               		.loc 1 257 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L5
  44               	.LVL2:
  45               	.L3:
 259:Descriptors.c **** 			break;
 260:Descriptors.c **** 		case DTYPE_Configuration: 
 261:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 262:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 262 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 261:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
  50               		.loc 1 261 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 263:Descriptors.c **** 			break;
  53               		.loc 1 263 0
  54 0028 00C0      		rjmp .L5
  55               	.LVL4:
  56               	.L4:
  57 002a 9927      		clr r25
  58               	.LVL5:
 264:Descriptors.c **** 		case DTYPE_String: 
 265:Descriptors.c **** 			switch (DescriptorNumber)
  59               		.loc 1 265 0
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 8230      		cpi r24,2
  64 0034 9105      		cpc r25,__zero_reg__
  65 0036 01F0      		breq .L7
  66 0038 892B      		or r24,r25
  67 003a 01F4      		brne .L11
  68               	.LVL6:
  69               	.LBB2:
 266:Descriptors.c **** 			{
 267:Descriptors.c **** 				case 0x00: 
 268:Descriptors.c **** 					Address = (void*)&LanguageString;
 269:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  70               		.loc 1 269 0
  71 003c E0E0      		ldi r30,lo8(LanguageString)
  72 003e F0E0      		ldi r31,hi8(LanguageString)
  73 0040 00C0      		rjmp .L12
  74               	.LVL7:
  75               	.L6:
  76               	.LBE2:
  77               	.LBB3:
 270:Descriptors.c **** 					break;
 271:Descriptors.c **** 				case 0x01: 
 272:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 273:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  78               		.loc 1 273 0
  79 0042 E0E0      		ldi r30,lo8(ManufacturerString)
  80 0044 F0E0      		ldi r31,hi8(ManufacturerString)
  81 0046 00C0      		rjmp .L12
  82               	.LVL8:
  83               	.L7:
  84               	.LBE3:
  85               	.LBB4:
 274:Descriptors.c **** 					break;
 275:Descriptors.c **** 				case 0x02: 
 276:Descriptors.c **** 					Address = (void*)&ProductString;
 277:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  86               		.loc 1 277 0
  87 0048 E0E0      		ldi r30,lo8(ProductString)
  88 004a F0E0      		ldi r31,hi8(ProductString)
  89               	.LVL9:
  90               	.L12:
  91               	/* #APP */
  92               	 ;  277 "Descriptors.c" 1
  93 004c 8491      		lpm r24, Z
  94               		
  95               	 ;  0 "" 2
  96               	.LVL10:
  97               	/* #NOAPP */
  98               	.LBE4:
  99 004e 90E0      		ldi r25,0
 100               	.LVL11:
 276:Descriptors.c **** 					Address = (void*)&ProductString;
 101               		.loc 1 276 0
 102 0050 9F01      		movw r18,r30
 278:Descriptors.c **** 					break;
 103               		.loc 1 278 0
 104 0052 00C0      		rjmp .L5
 105               	.LVL12:
 106               	.L11:
 252:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 107               		.loc 1 252 0
 108 0054 80E0      		ldi r24,0
 109 0056 90E0      		ldi r25,0
 251:Descriptors.c **** 	void*    Address = NULL;
 110               		.loc 1 251 0
 111 0058 20E0      		ldi r18,0
 112 005a 30E0      		ldi r19,0
 113               	.LVL13:
 114               	.L5:
 279:Descriptors.c **** 			}
 280:Descriptors.c **** 			
 281:Descriptors.c **** 			break;
 282:Descriptors.c **** 	}
 283:Descriptors.c **** 	
 284:Descriptors.c **** 	*DescriptorAddress = Address;
 115               		.loc 1 284 0
 116 005c FA01      		movw r30,r20
 117 005e 3183      		std Z+1,r19
 118 0060 2083      		st Z,r18
 285:Descriptors.c **** 	return Size;
 286:Descriptors.c **** }
 119               		.loc 1 286 0
 120 0062 0895      		ret
 121               		.cfi_endproc
 122               	.LFE66:
 124               	.global	ProductString
 125               		.section	.progmem.data,"a",@progbits
 128               	ProductString:
 129 0000 0000      		.zero	2
 130               	.global	ManufacturerString
 133               	ManufacturerString:
 134 0002 32        		.byte	50
 135 0003 03        		.byte	3
 136 0004 4100      		.string	"A"
 137 0006 7000      		.string	"p"
 138 0008 6900      		.string	"i"
 139 000a 6F00      		.string	"o"
 140 000c 2000      		.string	" "
 141 000e 6D00      		.string	"m"
 142 0010 6100      		.string	"a"
 143 0012 6E00      		.string	"n"
 144 0014 7500      		.string	"u"
 145 0016 6600      		.string	"f"
 146 0018 6100      		.string	"a"
 147 001a 6300      		.string	"c"
 148 001c 7400      		.string	"t"
 149 001e 7500      		.string	"u"
 150 0020 7200      		.string	"r"
 151 0022 6500      		.string	"e"
 152 0024 7200      		.string	"r"
 153 0026 2000      		.string	" "
 154 0028 2800      		.string	"("
 155 002a 7700      		.string	"w"
 156 002c 7700      		.string	"w"
 157 002e 7700      		.string	"w"
 158 0030 2E00      		.string	"."
 159 0032 6100      		.string	"a"
 160 0034 7000      		.string	"p"
 161 0036 6900      		.string	"i"
 162 0038 6F00      		.string	"o"
 163 003a 2E00      		.string	"."
 164 003c 6300      		.string	"c"
 165 003e 6300      		.string	"c"
 166 0040 2900      		.string	")"
 167 0042 00        		.string	""
 168 0043 00        		.string	""
 169               	.global	LanguageString
 172               	LanguageString:
 173 0044 04        		.byte	4
 174 0045 03        		.byte	3
 175 0046 0904      		.word	1033
 176               	.global	ConfigurationDescriptor
 179               	ConfigurationDescriptor:
 180 0048 09        		.byte	9
 181 0049 02        		.byte	2
 182 004a 3E00      		.word	62
 183 004c 02        		.byte	2
 184 004d 01        		.byte	1
 185 004e 00        		.byte	0
 186 004f C0        		.byte	-64
 187 0050 FA        		.byte	-6
 188 0051 09        		.byte	9
 189 0052 04        		.byte	4
 190 0053 00        		.byte	0
 191 0054 00        		.byte	0
 192 0055 01        		.byte	1
 193 0056 02        		.byte	2
 194 0057 02        		.byte	2
 195 0058 01        		.byte	1
 196 0059 00        		.byte	0
 197 005a 05        		.byte	5
 198 005b 24        		.byte	36
 199 005c 00        		.byte	0
 200 005d 01        		.byte	1
 201 005e 10        		.byte	16
 202 005f 04        		.byte	4
 203 0060 24        		.byte	36
 204 0061 02        		.byte	2
 205 0062 06        		.byte	6
 206 0063 05        		.byte	5
 207 0064 24        		.byte	36
 208 0065 06        		.byte	6
 209 0066 00        		.byte	0
 210 0067 01        		.byte	1
 211 0068 07        		.byte	7
 212 0069 05        		.byte	5
 213 006a 82        		.byte	-126
 214 006b 03        		.byte	3
 215 006c 0800      		.word	8
 216 006e FF        		.byte	-1
 217 006f 09        		.byte	9
 218 0070 04        		.byte	4
 219 0071 01        		.byte	1
 220 0072 00        		.byte	0
 221 0073 02        		.byte	2
 222 0074 0A        		.byte	10
 223 0075 00        		.byte	0
 224 0076 00        		.byte	0
 225 0077 00        		.byte	0
 226 0078 07        		.byte	7
 227 0079 05        		.byte	5
 228 007a 04        		.byte	4
 229 007b 02        		.byte	2
 230 007c 4000      		.word	64
 231 007e 01        		.byte	1
 232 007f 07        		.byte	7
 233 0080 05        		.byte	5
 234 0081 83        		.byte	-125
 235 0082 02        		.byte	2
 236 0083 4000      		.word	64
 237 0085 01        		.byte	1
 238               	.global	DeviceDescriptor
 241               	DeviceDescriptor:
 242 0086 12        		.byte	18
 243 0087 01        		.byte	1
 244 0088 1001      		.word	272
 245 008a 02        		.byte	2
 246 008b 00        		.byte	0
 247 008c 00        		.byte	0
 248 008d 08        		.byte	8
 249 008e EB03      		.word	1003
 250 0090 5260      		.word	24658
 251 0092 0100      		.word	1
 252 0094 01        		.byte	1
 253 0095 02        		.byte	2
 254 0096 DC        		.byte	-36
 255 0097 01        		.byte	1
 256               		.text
 257               	.Letext0:
 258               		.file 2 "/usr/lib/avr/include/stdint.h"
 259               		.file 3 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 260               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 261               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccgiaak4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgiaak4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgiaak4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgiaak4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgiaak4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgiaak4.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccgiaak4.s:241    .progmem.data:0000000000000086 DeviceDescriptor
     /tmp/ccgiaak4.s:179    .progmem.data:0000000000000048 ConfigurationDescriptor
     /tmp/ccgiaak4.s:172    .progmem.data:0000000000000044 LanguageString
     /tmp/ccgiaak4.s:133    .progmem.data:0000000000000002 ManufacturerString
     /tmp/ccgiaak4.s:128    .progmem.data:0000000000000000 ProductString

NO UNDEFINED SYMBOLS
