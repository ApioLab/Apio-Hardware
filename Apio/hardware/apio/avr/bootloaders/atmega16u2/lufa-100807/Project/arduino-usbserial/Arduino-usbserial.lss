
Arduino-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f0c  00000fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800116  00800116  00000fb6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004b0  00000000  00000000  00000fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008441  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020bc  00000000  00000000  000098b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000032c1  00000000  00000000  0000b975  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c58  00000000  00000000  0000ec38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002b3e  00000000  00000000  0000f890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004eed  00000000  00000000  000123ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000498  00000000  00000000  000172bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
   2:	00 00       	nop
				PLLCSR |= (1 << PLLE);
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
	while (!(UDCON & (1 << RMWKUP)));
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	82 c0       	rjmp	.+260    	; 0x12e <__bad_interrupt>
  2a:	00 00       	nop
}
  2c:	db c3       	rjmp	.+1974   	; 0x7e4 <__vector_11>
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  2e:	00 00       	nop
				
				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
  30:	80 c4       	rjmp	.+2304   	; 0x932 <__vector_12>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
				*BytesRem      -= CurrDescriptorSize;
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
				
		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	70 c0       	rjmp	.+224    	; 0x12e <__bad_interrupt>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a5 c1       	rjmp	.+842    	; 0x3a8 <__vector_23>
				*BytesRem      = PrevBytesRem;
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
		
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
}
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	f5 04       	cpc	r15, r5
  76:	17 05       	cpc	r17, r7
  78:	01 06       	cpc	r0, r17
  7a:	17 05       	cpc	r17, r7
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
  7c:	01 06       	cpc	r0, r17
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
  7e:	59 05       	cpc	r21, r9
  80:	76 05       	cpc	r23, r6
  82:	01 06       	cpc	r0, r17
  84:	c9 05       	cpc	r28, r9
  86:	db 05       	cpc	r29, r11

00000088 <ProductString>:
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
  88:	00 00                                               ..

0000008a <ManufacturerString>:
  8a:	18 03 41 00 70 00 69 00 6f 00 20 00 44 00 6f 00     ..A.p.i.o. .D.o.
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
  9a:	6e 00 67 00 6c 00 65 00 00 00                       n.g.l.e...

000000a4 <LanguageString>:
  a4:	04 03 09 04                                         ....

000000a8 <ConfigurationDescriptor>:
  a8:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............

				memset(ReportData, 0, sizeof(ReportData));
  b8:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
  c8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
  d8:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

000000e6 <DeviceDescriptor>:
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
  e6:	12 01 10 01 02 00 00 08 d0 16 5e 0a 01 00 01 02     ..........^.....

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
  f6:	dc 01                                               ..

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d2 e0       	ldi	r29, 0x02	; 2
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	11 e0       	ldi	r17, 0x01	; 1
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	ec e0       	ldi	r30, 0x0C	; 12
 10c:	ff e0       	ldi	r31, 0x0F	; 15
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 110:	05 90       	lpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a6 31       	cpi	r26, 0x16	; 22
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 11a:	22 e0       	ldi	r18, 0x02	; 2
 11c:	a6 e1       	ldi	r26, 0x16	; 22
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 124:	af 32       	cpi	r26, 0x2F	; 47
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	66 d0       	rcall	.+204    	; 0x1f8 <main>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 12c:	ed c6       	rjmp	.+3546   	; 0xf08 <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <RingBuffer_Insert>:
 130:	fc 01       	movw	r30, r24
 132:	e0 58       	subi	r30, 0x80	; 128
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	a0 81       	ld	r26, Z
 138:	b1 81       	ldd	r27, Z+1	; 0x01
 13a:	6c 93       	st	X, r22
 13c:	a0 81       	ld	r26, Z
 13e:	b1 81       	ldd	r27, Z+1	; 0x01
 140:	9d 01       	movw	r18, r26
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	31 83       	std	Z+1, r19	; 0x01
 148:	20 83       	st	Z, r18
 14a:	2e 17       	cp	r18, r30
 14c:	3f 07       	cpc	r19, r31

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 14e:	21 f4       	brne	.+8      	; 0x158 <RingBuffer_Insert+0x28>
 150:	12 96       	adiw	r26, 0x02	; 2
 152:	9c 93       	st	X, r25
 154:	8e 93       	st	-X, r24
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 156:	11 97       	sbiw	r26, 0x01	; 1
 158:	2f b7       	in	r18, 0x3f	; 63
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 15a:	f8 94       	cli
 15c:	fc 01       	movw	r30, r24
 15e:	ec 57       	subi	r30, 0x7C	; 124
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 83       	st	Z, r24
 168:	2f bf       	out	0x3f, r18	; 63
 16a:	08 95       	ret

0000016c <RingBuffer_Remove>:
 16c:	dc 01       	movw	r26, r24
 16e:	ae 57       	subi	r26, 0x7E	; 126
 170:	bf 4f       	sbci	r27, 0xFF	; 255
 172:	ed 91       	ld	r30, X+
 174:	fc 91       	ld	r31, X
 176:	11 97       	sbiw	r26, 0x01	; 1
 178:	41 91       	ld	r20, Z+
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 17a:	11 96       	adiw	r26, 0x01	; 1
 17c:	fc 93       	st	X, r31
 17e:	ee 93       	st	-X, r30
 180:	9c 01       	movw	r18, r24
 182:	20 58       	subi	r18, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	e2 17       	cp	r30, r18
 188:	f3 07       	cpc	r31, r19
 18a:	11 f4       	brne	.+4      	; 0x190 <RingBuffer_Remove+0x24>
 18c:	8d 93       	st	X+, r24
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 18e:	9c 93       	st	X, r25
 190:	2f b7       	in	r18, 0x3f	; 63
 192:	f8 94       	cli
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 194:	fc 01       	movw	r30, r24
 196:	ec 57       	subi	r30, 0x7C	; 124
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	90 81       	ld	r25, Z
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	90 83       	st	Z, r25
 1a0:	2f bf       	out	0x3f, r18	; 63
 1a2:	84 2f       	mov	r24, r20
 1a4:	08 95       	ret

000001a6 <SetupHardware>:
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 1a6:	84 b7       	in	r24, 0x34	; 52
 1a8:	87 7f       	andi	r24, 0xF7	; 247
 1aa:	84 bf       	out	0x34, r24	; 52
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	80 93 60 00 	sts	0x0060, r24
 1b6:	10 92 60 00 	sts	0x0060, r1
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	87 e6       	ldi	r24, 0x67	; 103
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 cd 00 	sts	0x00CD, r25
 1c4:	80 93 cc 00 	sts	0x00CC, r24
 1c8:	86 e0       	ldi	r24, 0x06	; 6
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 1ca:	80 93 ca 00 	sts	0x00CA, r24
 1ce:	10 92 c8 00 	sts	0x00C8, r1
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	80 93 c9 00 	sts	0x00C9, r24
 1d8:	53 9a       	sbi	0x0a, 3	; 10
 1da:	5a 9a       	sbi	0x0b, 2	; 11
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	80 66       	ori	r24, 0x60	; 96
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 66       	ori	r24, 0x60	; 96
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	f2 d2       	rcall	.+1508   	; 0x7ce <USB_Init>
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	85 bd       	out	0x25, r24	; 37
 1f2:	5f 9a       	sbi	0x0b, 7	; 11
 1f4:	57 9a       	sbi	0x0a, 7	; 10
 1f6:	08 95       	ret

000001f8 <main>:
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 1f8:	d6 df       	rcall	.-84     	; 0x1a6 <SetupHardware>
 1fa:	2f b7       	in	r18, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	8e e9       	ldi	r24, 0x9E	; 158
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	90 93 1f 02 	sts	0x021F, r25
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 206:	80 93 1e 02 	sts	0x021E, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 20a:	90 93 21 02 	sts	0x0221, r25
 20e:	80 93 20 02 	sts	0x0220, r24
 212:	2f bf       	out	0x3f, r18	; 63
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 214:	2f b7       	in	r18, 0x3f	; 63
 216:	f8 94       	cli
			}

			break;
	}
}
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 9a 01 	sts	0x019A, r25
 220:	80 93 99 01 	sts	0x0199, r24
 224:	90 93 9c 01 	sts	0x019C, r25
 228:	80 93 9b 01 	sts	0x019B, r24
 22c:	2f bf       	out	0x3f, r18	; 63
 22e:	78 94       	sei
 230:	d3 e0       	ldi	r29, 0x03	; 3
 232:	9f b7       	in	r25, 0x3f	; 63
 234:	f8 94       	cli
 236:	80 91 22 02 	lds	r24, 0x0222
 23a:	9f bf       	out	0x3f, r25	; 63
 23c:	80 38       	cpi	r24, 0x80	; 128
 23e:	49 f0       	breq	.+18     	; 0x252 <main+0x5a>
 240:	80 e0       	ldi	r24, 0x00	; 0
	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e d6       	rcall	.+3100   	; 0xe62 <CDC_Device_ReceiveByte>
 246:	97 fd       	sbrc	r25, 7
 248:	04 c0       	rjmp	.+8      	; 0x252 <main+0x5a>

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 24a:	68 2f       	mov	r22, r24
 24c:	8e e9       	ldi	r24, 0x9E	; 158
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	6f df       	rcall	.-290    	; 0x130 <RingBuffer_Insert>
 252:	8f b7       	in	r24, 0x3f	; 63
 254:	f8 94       	cli
 256:	c0 91 9d 01 	lds	r28, 0x019D
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 25a:	8f bf       	out	0x3f, r24	; 63
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Count = Buffer->Count;
 25c:	a8 99       	sbic	0x15, 0	; 21
 25e:	02 c0       	rjmp	.+4      	; 0x264 <main+0x6c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 260:	c1 36       	cpi	r28, 0x61	; 97
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 262:	58 f1       	brcs	.+86     	; 0x2ba <main+0xc2>
 264:	a8 9a       	sbi	0x15, 0	; 21
 266:	80 91 9d 01 	lds	r24, 0x019D
		{
			TIFR0 |= (1 << TOV0);
 26a:	88 23       	and	r24, r24

			if (USARTtoUSB_Buffer.Count) {
 26c:	19 f0       	breq	.+6      	; 0x274 <main+0x7c>
 26e:	5d 98       	cbi	0x0b, 5	; 11
 270:	d0 93 16 01 	sts	0x0116, r29
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 274:	cc 23       	and	r28, r28
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 276:	49 f0       	breq	.+18     	; 0x28a <main+0x92>
 278:	89 e1       	ldi	r24, 0x19	; 25
			}

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	77 df       	rcall	.-274    	; 0x16c <RingBuffer_Remove>
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 27e:	68 2f       	mov	r22, r24
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	93 d5       	rcall	.+2854   	; 0xdac <CDC_Device_SendByte>
 286:	c1 50       	subi	r28, 0x01	; 1
 288:	f5 cf       	rjmp	.-22     	; 0x274 <main+0x7c>
 28a:	80 91 16 01 	lds	r24, 0x0116
 28e:	88 23       	and	r24, r24
 290:	41 f0       	breq	.+16     	; 0x2a2 <main+0xaa>
 292:	80 91 16 01 	lds	r24, 0x0116
			  
			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 296:	81 50       	subi	r24, 0x01	; 1
 298:	80 93 16 01 	sts	0x0116, r24
 29c:	81 11       	cpse	r24, r1
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <main+0xaa>
 2a0:	5d 9a       	sbi	0x0b, 5	; 11
 2a2:	80 91 17 01 	lds	r24, 0x0117
 2a6:	88 23       	and	r24, r24
 2a8:	41 f0       	breq	.+16     	; 0x2ba <main+0xc2>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 2aa:	80 91 17 01 	lds	r24, 0x0117
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 2ae:	81 50       	subi	r24, 0x01	; 1
 2b0:	80 93 17 01 	sts	0x0117, r24
 2b4:	81 11       	cpse	r24, r1
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <main+0xc2>
 2b8:	5e 9a       	sbi	0x0b, 6	; 11
 2ba:	9f b7       	in	r25, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	80 91 22 02 	lds	r24, 0x0222
 2c2:	9f bf       	out	0x3f, r25	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2c4:	88 23       	and	r24, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2c6:	61 f0       	breq	.+24     	; 0x2e0 <main+0xe8>
			{
				Count = Buffer->Count;
 2c8:	8e e9       	ldi	r24, 0x9E	; 158
 2ca:	91 e0       	ldi	r25, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2cc:	4f df       	rcall	.-354    	; 0x16c <RingBuffer_Remove>
			  LEDs_TurnOffLEDs(LEDMASK_RX);
		}
		
		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
 2ce:	90 91 c8 00 	lds	r25, 0x00C8
		  Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 2d2:	95 ff       	sbrs	r25, 5
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <main+0xd6>
 2d6:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 2da:	5e 98       	cbi	0x0b, 6	; 11
 2dc:	d0 93 17 01 	sts	0x0117, r29
 2e0:	80 e0       	ldi	r24, 0x00	; 0
				UDR1 = DataByte;
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	b0 d5       	rcall	.+2912   	; 0xe46 <CDC_Device_USBTask>
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 2e6:	9a d4       	rcall	.+2356   	; 0xc1c <USB_USBTask>
		  	
		  	LEDs_TurnOnLEDs(LEDMASK_RX);
			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 2e8:	a4 cf       	rjmp	.-184    	; 0x232 <main+0x3a>

000002ea <EVENT_USB_Device_ConfigurationChanged>:
 2ea:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	11 c5       	rjmp	.+2594   	; 0xd12 <CDC_Device_ConfigureEndpoints>

000002f0 <EVENT_USB_Device_UnhandledControlRequest>:
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 2f4:	a5 c4       	rjmp	.+2378   	; 0xc40 <CDC_Device_ProcessControlRequest>

000002f6 <EVENT_CDC_Device_LineEncodingChanged>:
 2f6:	1f 93       	push	r17
	}
 2f8:	cf 93       	push	r28
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 2fe:	8c 89       	ldd	r24, Y+20	; 0x14
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	31 f0       	breq	.+12     	; 0x310 <__stack+0x11>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	11 f0       	breq	.+4      	; 0x30c <__stack+0xd>
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	03 c0       	rjmp	.+6      	; 0x312 <__stack+0x13>
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));		
			break;
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);		
 30c:	10 e2       	ldi	r17, 0x20	; 32
			break;
 30e:	01 c0       	rjmp	.+2      	; 0x312 <__stack+0x13>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));		
 310:	10 e3       	ldi	r17, 0x30	; 48
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);		
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 312:	8b 89       	ldd	r24, Y+19	; 0x13
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	09 f4       	brne	.+2      	; 0x31a <__stack+0x1b>
	  ConfigMask |= (1 << USBS1);
 318:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 31a:	8d 89       	ldd	r24, Y+21	; 0x15
 31c:	87 30       	cpi	r24, 0x07	; 7
 31e:	31 f0       	breq	.+12     	; 0x32c <__stack+0x2d>
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	31 f0       	breq	.+12     	; 0x330 <__stack+0x31>
 324:	86 30       	cpi	r24, 0x06	; 6
 326:	29 f4       	brne	.+10     	; 0x332 <__stack+0x33>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 328:	12 60       	ori	r17, 0x02	; 2
			break;
 32a:	03 c0       	rjmp	.+6      	; 0x332 <__stack+0x33>
		case 7:
			ConfigMask |= (1 << UCSZ11);
 32c:	14 60       	ori	r17, 0x04	; 4
			break;
 32e:	01 c0       	rjmp	.+2      	; 0x332 <__stack+0x33>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 330:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 332:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 336:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 33a:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 33e:	2f 85       	ldd	r18, Y+15	; 0x0f
 340:	38 89       	ldd	r19, Y+16	; 0x10
 342:	49 89       	ldd	r20, Y+17	; 0x11
 344:	5a 89       	ldd	r21, Y+18	; 0x12
 346:	21 15       	cp	r18, r1
 348:	81 ee       	ldi	r24, 0xE1	; 225
 34a:	38 07       	cpc	r19, r24
 34c:	41 05       	cpc	r20, r1
 34e:	51 05       	cpc	r21, r1
 350:	71 f0       	breq	.+28     	; 0x36e <__stack+0x6f>
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	
 352:	ca 01       	movw	r24, r20
 354:	b9 01       	movw	r22, r18
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	77 95       	ror	r23
 35c:	67 95       	ror	r22
 35e:	60 58       	subi	r22, 0x80	; 128
 360:	7b 47       	sbci	r23, 0x7B	; 123
 362:	81 4e       	sbci	r24, 0xE1	; 225
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	a8 d5       	rcall	.+2896   	; 0xeb8 <__udivmodsi4>
 368:	21 50       	subi	r18, 0x01	; 1
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 36a:	31 09       	sbc	r19, r1
 36c:	02 c0       	rjmp	.+4      	; 0x372 <__stack+0x73>
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	30 93 cd 00 	sts	0x00CD, r19
 376:	20 93 cc 00 	sts	0x00CC, r18
 37a:	10 93 ca 00 	sts	0x00CA, r17
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	

	UCSR1C = ConfigMask;
 37e:	8f 85       	ldd	r24, Y+15	; 0x0f
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 380:	98 89       	ldd	r25, Y+16	; 0x10
 382:	a9 89       	ldd	r26, Y+17	; 0x11
 384:	ba 89       	ldd	r27, Y+18	; 0x12
 386:	81 15       	cp	r24, r1
 388:	91 4e       	sbci	r25, 0xE1	; 225
 38a:	a1 05       	cpc	r26, r1
 38c:	b1 05       	cpc	r27, r1
 38e:	11 f4       	brne	.+4      	; 0x394 <__stack+0x95>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	01 c0       	rjmp	.+2      	; 0x396 <__stack+0x97>
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 93 c8 00 	sts	0x00C8, r24
 39a:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 39c:	80 93 c9 00 	sts	0x00C9, r24
 3a0:	df 91       	pop	r29
}
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	08 95       	ret

000003a8 <__vector_23>:
 3a8:	1f 92       	push	r1

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 3ca:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 3ce:	8e b3       	in	r24, 0x1e	; 30
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	19 f4       	brne	.+6      	; 0x3da <__vector_23+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 3d4:	89 e1       	ldi	r24, 0x19	; 25
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	ab de       	rcall	.-682    	; 0x130 <RingBuffer_Insert>
 3da:	ff 91       	pop	r31
}
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <EVENT_CDC_Device_ControLineStateChanged>:
 3fc:	fc 01       	movw	r30, r24
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
 3fe:	85 85       	ldd	r24, Z+13	; 0x0d

	if (CurrentDTRState)
 400:	80 ff       	sbrs	r24, 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <EVENT_CDC_Device_ControLineStateChanged+0xc>
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 404:	5f 98       	cbi	0x0b, 7	; 11
 406:	08 95       	ret
	else
	  AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 408:	5f 9a       	sbi	0x0b, 7	; 11
 40a:	08 95       	ret

0000040c <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 40c:	29 2f       	mov	r18, r25
 40e:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 410:	22 30       	cpi	r18, 0x02	; 2
 412:	31 05       	cpc	r19, r1
 414:	59 f0       	breq	.+22     	; 0x42c <CALLBACK_USB_GetDescriptor+0x20>
 416:	23 30       	cpi	r18, 0x03	; 3
 418:	31 05       	cpc	r19, r1
 41a:	69 f0       	breq	.+26     	; 0x436 <CALLBACK_USB_GetDescriptor+0x2a>
 41c:	21 30       	cpi	r18, 0x01	; 1
 41e:	31 05       	cpc	r19, r1
 420:	f9 f4       	brne	.+62     	; 0x460 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 422:	82 e1       	ldi	r24, 0x12	; 18
 424:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
 426:	26 ee       	ldi	r18, 0xE6	; 230
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	1e c0       	rjmp	.+60     	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 42c:	8e e3       	ldi	r24, 0x3E	; 62
 42e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 430:	28 ea       	ldi	r18, 0xA8	; 168
 432:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 434:	19 c0       	rjmp	.+50     	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
 436:	99 27       	eor	r25, r25
		case DTYPE_String: 
			switch (DescriptorNumber)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	91 05       	cpc	r25, r1
 43c:	41 f0       	breq	.+16     	; 0x44e <CALLBACK_USB_GetDescriptor+0x42>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	91 05       	cpc	r25, r1
 442:	41 f0       	breq	.+16     	; 0x454 <CALLBACK_USB_GetDescriptor+0x48>
 444:	89 2b       	or	r24, r25
 446:	61 f4       	brne	.+24     	; 0x460 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 448:	e4 ea       	ldi	r30, 0xA4	; 164
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	05 c0       	rjmp	.+10     	; 0x458 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 44e:	ea e8       	ldi	r30, 0x8A	; 138
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 454:	e8 e8       	ldi	r30, 0x88	; 136
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	84 91       	lpm	r24, Z
 45a:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
 45c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 45e:	04 c0       	rjmp	.+8      	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
 468:	fa 01       	movw	r30, r20
 46a:	31 83       	std	Z+1, r19	; 0x01
 46c:	20 83       	st	Z, r18
	return Size;
}
 46e:	08 95       	ret

00000470 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 470:	28 e0       	ldi	r18, 0x08	; 8
 472:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 474:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
 476:	28 17       	cp	r18, r24
 478:	39 07       	cpc	r19, r25
 47a:	20 f4       	brcc	.+8      	; 0x484 <Endpoint_BytesToEPSizeMaskDynamic+0x14>
				{
					MaskVal++;
 47c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	f9 cf       	rjmp	.-14     	; 0x476 <Endpoint_BytesToEPSizeMaskDynamic+0x6>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
 484:	84 2f       	mov	r24, r20
 486:	82 95       	swap	r24
 488:	80 7f       	andi	r24, 0xF0	; 240
 48a:	08 95       	ret

0000048c <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 48c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 490:	eb ee       	ldi	r30, 0xEB	; 235
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 49a:	ed ee       	ldi	r30, 0xED	; 237
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 4a0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 4a4:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4a6:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 4aa:	88 1f       	adc	r24, r24
 4ac:	88 27       	eor	r24, r24
 4ae:	88 1f       	adc	r24, r24
 4b0:	08 95       	ret

000004b2 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 4b2:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4b6:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4b8:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 4bc:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
 4c0:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
 4c4:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 4c8:	90 91 eb 00 	lds	r25, 0x00EB
 4cc:	9e 7f       	andi	r25, 0xFE	; 254
 4ce:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	85 30       	cpi	r24, 0x05	; 5
 4d6:	81 f7       	brne	.-32     	; 0x4b8 <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 4d8:	08 95       	ret

000004da <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4da:	80 91 27 02 	lds	r24, 0x0227
 4de:	87 fd       	sbrc	r24, 7
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 4e2:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4e6:	80 ff       	sbrs	r24, 0
 4e8:	0d c0       	rjmp	.+26     	; 0x504 <Endpoint_ClearStatusStage+0x2a>
 4ea:	10 c0       	rjmp	.+32     	; 0x50c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ec:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4f0:	82 fd       	sbrc	r24, 2
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4f4:	8e b3       	in	r24, 0x1e	; 30
 4f6:	81 11       	cpse	r24, r1
 4f8:	f9 cf       	rjmp	.-14     	; 0x4ec <Endpoint_ClearStatusStage+0x12>
 4fa:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4fc:	80 91 e8 00 	lds	r24, 0x00E8
 500:	8b 77       	andi	r24, 0x7B	; 123
 502:	07 c0       	rjmp	.+14     	; 0x512 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 504:	8e b3       	in	r24, 0x1e	; 30
 506:	81 11       	cpse	r24, r1
 508:	ec cf       	rjmp	.-40     	; 0x4e2 <Endpoint_ClearStatusStage+0x8>
 50a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 50c:	80 91 e8 00 	lds	r24, 0x00E8
 510:	8e 77       	andi	r24, 0x7E	; 126
 512:	80 93 e8 00 	sts	0x00E8, r24
 516:	08 95       	ret

00000518 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 518:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 51a:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 51e:	90 ff       	sbrs	r25, 0
 520:	05 c0       	rjmp	.+10     	; 0x52c <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 522:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
 526:	90 ff       	sbrs	r25, 0
 528:	05 c0       	rjmp	.+10     	; 0x534 <Endpoint_WaitUntilReady+0x1c>
 52a:	1b c0       	rjmp	.+54     	; 0x562 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 52c:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 530:	92 fd       	sbrc	r25, 2
 532:	17 c0       	rjmp	.+46     	; 0x562 <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 534:	9e b3       	in	r25, 0x1e	; 30
 536:	99 23       	and	r25, r25
 538:	b1 f0       	breq	.+44     	; 0x566 <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 53a:	9e b3       	in	r25, 0x1e	; 30
 53c:	95 30       	cpi	r25, 0x05	; 5
 53e:	a9 f0       	breq	.+42     	; 0x56a <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 540:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 544:	95 fd       	sbrc	r25, 5
 546:	13 c0       	rjmp	.+38     	; 0x56e <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 548:	90 91 e1 00 	lds	r25, 0x00E1
 54c:	92 ff       	sbrs	r25, 2
 54e:	e5 cf       	rjmp	.-54     	; 0x51a <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 550:	90 91 e1 00 	lds	r25, 0x00E1
 554:	9b 7f       	andi	r25, 0xFB	; 251
 556:	90 93 e1 00 	sts	0x00E1, r25
 55a:	81 50       	subi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
 55c:	f1 f6       	brne	.-68     	; 0x51a <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 55e:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
 560:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	08 95       	ret

00000572 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 572:	20 91 2d 02 	lds	r18, 0x022D
 576:	30 91 2e 02 	lds	r19, 0x022E
 57a:	26 17       	cp	r18, r22
 57c:	37 07       	cpc	r19, r23
 57e:	48 f0       	brcs	.+18     	; 0x592 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	39 f4       	brne	.+14     	; 0x594 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 586:	20 91 e8 00 	lds	r18, 0x00E8
 58a:	2e 77       	andi	r18, 0x7E	; 126
 58c:	20 93 e8 00 	sts	0x00E8, r18
 590:	01 c0       	rjmp	.+2      	; 0x594 <Endpoint_Write_Control_Stream_LE+0x22>
 592:	b9 01       	movw	r22, r18
 594:	30 e0       	ldi	r19, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 596:	61 15       	cp	r22, r1
 598:	71 05       	cpc	r23, r1
 59a:	91 f1       	breq	.+100    	; 0x600 <Endpoint_Write_Control_Stream_LE+0x8e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 59c:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 5a0:	23 fd       	sbrc	r18, 3
 5a2:	38 c0       	rjmp	.+112    	; 0x614 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5a4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 5a8:	22 ff       	sbrs	r18, 2
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0x46>
 5ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 5b0:	82 ff       	sbrs	r24, 2
 5b2:	29 c0       	rjmp	.+82     	; 0x606 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5b8:	2e b3       	in	r18, 0x1e	; 30
 5ba:	22 23       	and	r18, r18
 5bc:	69 f1       	breq	.+90     	; 0x618 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5be:	2e b3       	in	r18, 0x1e	; 30
 5c0:	25 30       	cpi	r18, 0x05	; 5
 5c2:	61 f1       	breq	.+88     	; 0x61c <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 5c4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 5c8:	20 ff       	sbrs	r18, 0
 5ca:	e5 cf       	rjmp	.-54     	; 0x596 <Endpoint_Write_Control_Stream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 5cc:	20 91 f2 00 	lds	r18, 0x00F2
 5d0:	fc 01       	movw	r30, r24
 5d2:	cf 01       	movw	r24, r30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 5d4:	61 15       	cp	r22, r1
 5d6:	71 05       	cpc	r23, r1
 5d8:	49 f0       	breq	.+18     	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x7a>
 5da:	28 30       	cpi	r18, 0x08	; 8
 5dc:	38 f4       	brcc	.+14     	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5de:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 5e0:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 5e4:	61 50       	subi	r22, 0x01	; 1
 5e6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5e8:	2f 5f       	subi	r18, 0xFF	; 255
 5ea:	f3 cf       	rjmp	.-26     	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 5ec:	31 e0       	ldi	r19, 0x01	; 1
 5ee:	28 30       	cpi	r18, 0x08	; 8
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x82>
 5f2:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5f4:	20 91 e8 00 	lds	r18, 0x00E8
 5f8:	2e 77       	andi	r18, 0x7E	; 126
 5fa:	20 93 e8 00 	sts	0x00E8, r18
 5fe:	cb cf       	rjmp	.-106    	; 0x596 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 600:	31 11       	cpse	r19, r1
 602:	cc cf       	rjmp	.-104    	; 0x59c <Endpoint_Write_Control_Stream_LE+0x2a>
 604:	d3 cf       	rjmp	.-90     	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 606:	8e b3       	in	r24, 0x1e	; 30
 608:	88 23       	and	r24, r24
 60a:	31 f0       	breq	.+12     	; 0x618 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 60c:	8e b3       	in	r24, 0x1e	; 30
 60e:	85 30       	cpi	r24, 0x05	; 5
 610:	69 f6       	brne	.-102    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x3a>
 612:	04 c0       	rjmp	.+8      	; 0x61c <Endpoint_Write_Control_Stream_LE+0xaa>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 61c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 61e:	08 95       	ret

00000620 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 620:	20 91 2d 02 	lds	r18, 0x022D
 624:	30 91 2e 02 	lds	r19, 0x022E
 628:	26 17       	cp	r18, r22
 62a:	37 07       	cpc	r19, r23
 62c:	48 f0       	brcs	.+18     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	39 f4       	brne	.+14     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x22>
 634:	20 91 e8 00 	lds	r18, 0x00E8
 638:	2e 77       	andi	r18, 0x7E	; 126
 63a:	20 93 e8 00 	sts	0x00E8, r18
 63e:	01 c0       	rjmp	.+2      	; 0x642 <Endpoint_Write_Control_PStream_LE+0x22>
 640:	b9 01       	movw	r22, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 642:	30 e0       	ldi	r19, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 644:	61 15       	cp	r22, r1
 646:	71 05       	cpc	r23, r1
 648:	99 f1       	breq	.+102    	; 0x6b0 <Endpoint_Write_Control_PStream_LE+0x90>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 64a:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 64e:	23 fd       	sbrc	r18, 3
 650:	39 c0       	rjmp	.+114    	; 0x6c4 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 652:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 656:	22 ff       	sbrs	r18, 2
 658:	06 c0       	rjmp	.+12     	; 0x666 <Endpoint_Write_Control_PStream_LE+0x46>
 65a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 65e:	82 ff       	sbrs	r24, 2
 660:	2a c0       	rjmp	.+84     	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 666:	2e b3       	in	r18, 0x1e	; 30
 668:	22 23       	and	r18, r18
 66a:	71 f1       	breq	.+92     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 66c:	2e b3       	in	r18, 0x1e	; 30
 66e:	25 30       	cpi	r18, 0x05	; 5
 670:	69 f1       	breq	.+90     	; 0x6cc <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 672:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 676:	20 ff       	sbrs	r18, 0
 678:	e5 cf       	rjmp	.-54     	; 0x644 <Endpoint_Write_Control_PStream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 67a:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 67e:	fc 01       	movw	r30, r24
 680:	cf 01       	movw	r24, r30
 682:	61 15       	cp	r22, r1
 684:	71 05       	cpc	r23, r1
 686:	51 f0       	breq	.+20     	; 0x69c <Endpoint_Write_Control_PStream_LE+0x7c>
 688:	28 30       	cpi	r18, 0x08	; 8
 68a:	40 f4       	brcc	.+16     	; 0x69c <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 68c:	84 91       	lpm	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 68e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 692:	61 50       	subi	r22, 0x01	; 1
 694:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	31 96       	adiw	r30, 0x01	; 1
 69a:	f2 cf       	rjmp	.-28     	; 0x680 <Endpoint_Write_Control_PStream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 69c:	31 e0       	ldi	r19, 0x01	; 1
 69e:	28 30       	cpi	r18, 0x08	; 8
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <Endpoint_Write_Control_PStream_LE+0x84>
 6a2:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6a4:	20 91 e8 00 	lds	r18, 0x00E8
 6a8:	2e 77       	andi	r18, 0x7E	; 126
 6aa:	20 93 e8 00 	sts	0x00E8, r18
 6ae:	ca cf       	rjmp	.-108    	; 0x644 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6b0:	31 11       	cpse	r19, r1
 6b2:	cb cf       	rjmp	.-106    	; 0x64a <Endpoint_Write_Control_PStream_LE+0x2a>
 6b4:	d2 cf       	rjmp	.-92     	; 0x65a <Endpoint_Write_Control_PStream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6b6:	8e b3       	in	r24, 0x1e	; 30
 6b8:	88 23       	and	r24, r24
 6ba:	31 f0       	breq	.+12     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6bc:	8e b3       	in	r24, 0x1e	; 30
 6be:	85 30       	cpi	r24, 0x05	; 5
 6c0:	61 f6       	brne	.-104    	; 0x65a <Endpoint_Write_Control_PStream_LE+0x3a>
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <Endpoint_Write_Control_PStream_LE+0xac>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6cc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6ce:	08 95       	ret

000006d0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 6d0:	61 15       	cp	r22, r1
 6d2:	71 05       	cpc	r23, r1
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6d6:	20 91 e8 00 	lds	r18, 0x00E8
 6da:	2b 77       	andi	r18, 0x7B	; 123
 6dc:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();
	
	while (Length)
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	49 f1       	breq	.+82     	; 0x738 <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6e6:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 6ea:	23 fd       	sbrc	r18, 3
 6ec:	2a c0       	rjmp	.+84     	; 0x742 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6ee:	2e b3       	in	r18, 0x1e	; 30
 6f0:	22 23       	and	r18, r18
 6f2:	59 f1       	breq	.+86     	; 0x74a <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6f4:	2e b3       	in	r18, 0x1e	; 30
 6f6:	25 30       	cpi	r18, 0x05	; 5
 6f8:	51 f1       	breq	.+84     	; 0x74e <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6fa:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6fe:	22 ff       	sbrs	r18, 2
 700:	f2 cf       	rjmp	.-28     	; 0x6e6 <Endpoint_Read_Control_Stream_LE+0x16>
 702:	fc 01       	movw	r30, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 704:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
 708:	88 23       	and	r24, r24
 70a:	71 f0       	breq	.+28     	; 0x728 <Endpoint_Read_Control_Stream_LE+0x58>
 70c:	9f 01       	movw	r18, r30
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	c9 01       	movw	r24, r18
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 714:	40 91 f1 00 	lds	r20, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 718:	40 83       	st	Z, r20
				Length--;
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	c9 f2       	breq	.-78     	; 0x6d6 <Endpoint_Read_Control_Stream_LE+0x6>
 724:	f9 01       	movw	r30, r18
 726:	ee cf       	rjmp	.-36     	; 0x704 <Endpoint_Read_Control_Stream_LE+0x34>
 728:	cf 01       	movw	r24, r30
 72a:	d5 cf       	rjmp	.-86     	; 0x6d6 <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 72c:	8e b3       	in	r24, 0x1e	; 30
 72e:	88 23       	and	r24, r24
 730:	61 f0       	breq	.+24     	; 0x74a <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 732:	8e b3       	in	r24, 0x1e	; 30
 734:	85 30       	cpi	r24, 0x05	; 5
 736:	59 f0       	breq	.+22     	; 0x74e <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 738:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 73c:	80 ff       	sbrs	r24, 0
 73e:	f6 cf       	rjmp	.-20     	; 0x72c <Endpoint_Read_Control_Stream_LE+0x5c>
 740:	02 c0       	rjmp	.+4      	; 0x746 <Endpoint_Read_Control_Stream_LE+0x76>
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 74e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 750:	08 95       	ret

00000752 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 752:	42 d0       	rcall	.+132    	; 0x7d8 <USB_INT_DisableAllInterrupts>
 754:	44 d0       	rcall	.+136    	; 0x7de <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 756:	1e ba       	out	0x1e, r1	; 30
 758:	10 92 25 02 	sts	0x0225, r1
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
 75c:	10 92 24 02 	sts	0x0224, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 760:	10 92 23 02 	sts	0x0223, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 764:	84 e0       	ldi	r24, 0x04	; 4
 766:	89 bd       	out	0x29, r24	; 41
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 768:	89 b5       	in	r24, 0x29	; 41
 76a:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
 76c:	89 bd       	out	0x29, r24	; 41
 76e:	09 b4       	in	r0, 0x29	; 41
 770:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 772:	fd cf       	rjmp	.-6      	; 0x76e <USB_ResetInterface+0x1c>
 774:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 778:	98 2f       	mov	r25, r24
 77a:	9f 77       	andi	r25, 0x7F	; 127
				
				USBCON = (Temp & ~(1 << USBE));
 77c:	90 93 d8 00 	sts	0x00D8, r25
 780:	80 68       	ori	r24, 0x80	; 128
 782:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
 786:	80 91 63 00 	lds	r24, 0x0063
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 78a:	8e 7f       	andi	r24, 0xFE	; 254
 78c:	80 93 63 00 	sts	0x0063, r24
 790:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 794:	8f 7d       	andi	r24, 0xDF	; 223
 796:	80 93 d8 00 	sts	0x00D8, r24
 79a:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 79e:	8e 7f       	andi	r24, 0xFE	; 254
 7a0:	80 93 e0 00 	sts	0x00E0, r24
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 7a8:	8e 7f       	andi	r24, 0xFE	; 254
 7aa:	80 93 e1 00 	sts	0x00E1, r24
 7ae:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_SUSPEND);
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	80 93 e2 00 	sts	0x00E2, r24
 7b8:	80 91 e1 00 	lds	r24, 0x00E1
	USB_INT_Clear(USB_INT_EORSTI);
 7bc:	87 7f       	andi	r24, 0xF7	; 247
 7be:	80 93 e1 00 	sts	0x00E1, r24
 7c2:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_EORSTI);
 7c6:	88 60       	ori	r24, 0x08	; 8
 7c8:	80 93 e2 00 	sts	0x00E2, r24
 7cc:	08 95       	ret

000007ce <USB_Init>:
 7ce:	c1 df       	rcall	.-126    	; 0x752 <USB_ResetInterface>
 7d0:	81 e0       	ldi	r24, 0x01	; 1

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 7d2:	80 93 26 02 	sts	0x0226, r24
 7d6:	08 95       	ret

000007d8 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7d8:	10 92 e2 00 	sts	0x00E2, r1
 7dc:	08 95       	ret

000007de <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 7de:	10 92 e1 00 	sts	0x00E1, r1
 7e2:	08 95       	ret

000007e4 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7e4:	1f 92       	push	r1
 7e6:	0f 92       	push	r0
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	0f 92       	push	r0
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 93       	push	r18
 7f0:	3f 93       	push	r19
 7f2:	4f 93       	push	r20
 7f4:	5f 93       	push	r21
 7f6:	6f 93       	push	r22
 7f8:	7f 93       	push	r23
 7fa:	8f 93       	push	r24
 7fc:	9f 93       	push	r25
 7fe:	af 93       	push	r26
 800:	bf 93       	push	r27
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 806:	80 91 e1 00 	lds	r24, 0x00E1
 80a:	80 ff       	sbrs	r24, 0
 80c:	1b c0       	rjmp	.+54     	; 0x844 <__vector_11+0x60>
 80e:	80 91 e2 00 	lds	r24, 0x00E2
 812:	80 ff       	sbrs	r24, 0
 814:	17 c0       	rjmp	.+46     	; 0x844 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 816:	80 91 e1 00 	lds	r24, 0x00E1
 81a:	8e 7f       	andi	r24, 0xFE	; 254
 81c:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 820:	80 91 e2 00 	lds	r24, 0x00E2
 824:	8e 7f       	andi	r24, 0xFE	; 254
 826:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 82a:	80 91 e2 00 	lds	r24, 0x00E2
 82e:	80 61       	ori	r24, 0x10	; 16
 830:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 834:	80 91 d8 00 	lds	r24, 0x00D8
 838:	80 62       	ori	r24, 0x20	; 32
 83a:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 83e:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 840:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 842:	eb d1       	rcall	.+982    	; 0xc1a <USB_Event_Stub>
 844:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 848:	84 ff       	sbrs	r24, 4
 84a:	29 c0       	rjmp	.+82     	; 0x89e <__vector_11+0xba>
 84c:	80 91 e2 00 	lds	r24, 0x00E2
 850:	84 ff       	sbrs	r24, 4
 852:	25 c0       	rjmp	.+74     	; 0x89e <__vector_11+0xba>
 854:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 856:	89 bd       	out	0x29, r24	; 41
 858:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 85a:	82 60       	ori	r24, 0x02	; 2
 85c:	89 bd       	out	0x29, r24	; 41
 85e:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 860:	00 fe       	sbrs	r0, 0
 862:	fd cf       	rjmp	.-6      	; 0x85e <__vector_11+0x7a>
 864:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 868:	8f 7d       	andi	r24, 0xDF	; 223
 86a:	80 93 d8 00 	sts	0x00D8, r24
 86e:	80 91 e1 00 	lds	r24, 0x00E1
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 872:	8f 7e       	andi	r24, 0xEF	; 239
 874:	80 93 e1 00 	sts	0x00E1, r24
 878:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_WAKEUP);
 87c:	8f 7e       	andi	r24, 0xEF	; 239
 87e:	80 93 e2 00 	sts	0x00E2, r24
 882:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_SUSPEND);
 886:	81 60       	ori	r24, 0x01	; 1
 888:	80 93 e2 00 	sts	0x00E2, r24
 88c:	80 91 25 02 	lds	r24, 0x0225
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 890:	88 23       	and	r24, r24
 892:	11 f0       	breq	.+4      	; 0x898 <__vector_11+0xb4>
 894:	84 e0       	ldi	r24, 0x04	; 4
 896:	01 c0       	rjmp	.+2      	; 0x89a <__vector_11+0xb6>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	8e bb       	out	0x1e, r24	; 30
 89c:	be d1       	rcall	.+892    	; 0xc1a <USB_Event_Stub>
		EVENT_USB_Device_Connect();
 89e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8a2:	83 ff       	sbrs	r24, 3
 8a4:	27 c0       	rjmp	.+78     	; 0x8f4 <__vector_11+0x110>
 8a6:	80 91 e2 00 	lds	r24, 0x00E2
 8aa:	83 ff       	sbrs	r24, 3
 8ac:	23 c0       	rjmp	.+70     	; 0x8f4 <__vector_11+0x110>
 8ae:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);
 8b2:	87 7f       	andi	r24, 0xF7	; 247
 8b4:	80 93 e1 00 	sts	0x00E1, r24
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	8e bb       	out	0x1e, r24	; 30

		USB_DeviceState         = DEVICE_STATE_Default;
 8bc:	10 92 25 02 	sts	0x0225, r1
		USB_ConfigurationNumber = 0;
 8c0:	80 91 e1 00 	lds	r24, 0x00E1

		USB_INT_Clear(USB_INT_SUSPEND);
 8c4:	8e 7f       	andi	r24, 0xFE	; 254
 8c6:	80 93 e1 00 	sts	0x00E1, r24
 8ca:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Disable(USB_INT_SUSPEND);
 8ce:	8e 7f       	andi	r24, 0xFE	; 254
 8d0:	80 93 e2 00 	sts	0x00E2, r24
 8d4:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUP);
 8d8:	80 61       	ori	r24, 0x10	; 16
 8da:	80 93 e2 00 	sts	0x00E2, r24
 8de:	e9 dd       	rcall	.-1070   	; 0x4b2 <Endpoint_ClearEndpoints>
 8e0:	42 e0       	ldi	r20, 0x02	; 2

		Endpoint_ClearEndpoints();
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	80 e0       	ldi	r24, 0x00	; 0
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 8e6:	d2 dd       	rcall	.-1116   	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
 8e8:	80 91 f0 00 	lds	r24, 0x00F0
 8ec:	88 60       	ori	r24, 0x08	; 8
 8ee:	80 93 f0 00 	sts	0x00F0, r24
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 8f2:	93 d1       	rcall	.+806    	; 0xc1a <USB_Event_Stub>
 8f4:	80 91 e1 00 	lds	r24, 0x00E1
 8f8:	82 ff       	sbrs	r24, 2
		#endif

		EVENT_USB_Device_Reset();
 8fa:	0a c0       	rjmp	.+20     	; 0x910 <__vector_11+0x12c>
 8fc:	80 91 e2 00 	lds	r24, 0x00E2
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 900:	82 ff       	sbrs	r24, 2
 902:	06 c0       	rjmp	.+12     	; 0x910 <__vector_11+0x12c>
 904:	80 91 e1 00 	lds	r24, 0x00E1
 908:	8b 7f       	andi	r24, 0xFB	; 251
 90a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);
 90e:	85 d1       	rcall	.+778    	; 0xc1a <USB_Event_Stub>
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
		
		EVENT_USB_Device_StartOfFrame();
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <__vector_12>:
 932:	1f 92       	push	r1
 934:	0f 92       	push	r0
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	0f 92       	push	r0
 93a:	11 24       	eor	r1, r1
 93c:	2f 93       	push	r18

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 93e:	3f 93       	push	r19
 940:	4f 93       	push	r20
 942:	5f 93       	push	r21
 944:	6f 93       	push	r22
 946:	7f 93       	push	r23
 948:	8f 93       	push	r24
 94a:	9f 93       	push	r25
 94c:	af 93       	push	r26
 94e:	bf 93       	push	r27
 950:	cf 93       	push	r28
 952:	ef 93       	push	r30
 954:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 956:	e9 ee       	ldi	r30, 0xE9	; 233
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	c0 81       	ld	r28, Z
 95c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 95e:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 960:	e0 ef       	ldi	r30, 0xF0	; 240
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
 96a:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 96c:	1c d0       	rcall	.+56     	; 0x9a6 <USB_Device_ProcessControlRequest>
 96e:	f8 94       	cli
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
 970:	e9 ee       	ldi	r30, 0xE9	; 233
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	10 82       	st	Z, r1
 976:	a0 ef       	ldi	r26, 0xF0	; 240
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	8c 91       	ld	r24, X
 97c:	88 60       	ori	r24, 0x08	; 8
 97e:	8c 93       	st	X, r24
 980:	c0 83       	st	Z, r28
 982:	ff 91       	pop	r31
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 984:	ef 91       	pop	r30
 986:	cf 91       	pop	r28
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	aa 97       	sbiw	r28, 0x2a	; 42
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	e7 e2       	ldi	r30, 0x27	; 39
 9be:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 9c0:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 9c4:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9c6:	22 e0       	ldi	r18, 0x02	; 2
 9c8:	ef 32       	cpi	r30, 0x2F	; 47
 9ca:	f2 07       	cpc	r31, r18
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ce:	20 91 27 02 	lds	r18, 0x0227
	
	switch (USB_ControlRequest.bRequest)
 9d2:	30 91 28 02 	lds	r19, 0x0228
 9d6:	83 2f       	mov	r24, r19
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	8a 30       	cpi	r24, 0x0A	; 10
 9dc:	91 05       	cpc	r25, r1
 9de:	08 f0       	brcs	.+2      	; 0x9e2 <USB_Device_ProcessControlRequest+0x3c>
 9e0:	10 c1       	rjmp	.+544    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 9e2:	fc 01       	movw	r30, r24
 9e4:	e6 5c       	subi	r30, 0xC6	; 198
 9e6:	ff 4f       	sbci	r31, 0xFF	; 255
 9e8:	89 c2       	rjmp	.+1298   	; 0xefc <__tablejump2__>
 9ea:	20 38       	cpi	r18, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ec:	81 f0       	breq	.+32     	; 0xa0e <USB_Device_ProcessControlRequest+0x68>
 9ee:	22 38       	cpi	r18, 0x82	; 130
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0x4e>
 9f2:	07 c1       	rjmp	.+526    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 9f4:	80 91 2b 02 	lds	r24, 0x022B
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9f8:	87 70       	andi	r24, 0x07	; 7
 9fa:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9fe:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a02:	85 fb       	bst	r24, 5
 a04:	88 27       	eor	r24, r24
 a06:	80 f9       	bld	r24, 0
 a08:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <USB_Device_ProcessControlRequest+0x74>
 a0e:	80 91 23 02 	lds	r24, 0x0223
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a12:	90 91 24 02 	lds	r25, 0x0224
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
 a16:	91 11       	cpse	r25, r1
 a18:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a1a:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a1e:	97 7f       	andi	r25, 0xF7	; 247
 a20:	90 93 e8 00 	sts	0x00E8, r25
 a24:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 a28:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
 a2c:	bd c0       	rjmp	.+378    	; 0xba8 <USB_Device_ProcessControlRequest+0x202>
 a2e:	82 2f       	mov	r24, r18
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a30:	8d 7f       	andi	r24, 0xFD	; 253
 a32:	09 f0       	breq	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x90>
 a34:	e6 c0       	rjmp	.+460    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 a36:	22 23       	and	r18, r18
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a38:	19 f0       	breq	.+6      	; 0xa40 <USB_Device_ProcessControlRequest+0x9a>
 a3a:	22 30       	cpi	r18, 0x02	; 2
 a3c:	61 f0       	breq	.+24     	; 0xa56 <USB_Device_ProcessControlRequest+0xb0>
 a3e:	d2 c0       	rjmp	.+420    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 a40:	80 91 29 02 	lds	r24, 0x0229
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
 a44:	81 30       	cpi	r24, 0x01	; 1
 a46:	09 f0       	breq	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0xa4>
 a48:	cd c0       	rjmp	.+410    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 a4a:	33 30       	cpi	r19, 0x03	; 3
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a4c:	09 f0       	breq	.+2      	; 0xa50 <USB_Device_ProcessControlRequest+0xaa>
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	80 93 24 02 	sts	0x0224, r24
 a54:	28 c0       	rjmp	.+80     	; 0xaa6 <USB_Device_ProcessControlRequest+0x100>
 a56:	80 91 29 02 	lds	r24, 0x0229
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 a5a:	81 11       	cpse	r24, r1
 a5c:	24 c0       	rjmp	.+72     	; 0xaa6 <USB_Device_ProcessControlRequest+0x100>
 a5e:	20 91 2b 02 	lds	r18, 0x022B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a62:	27 70       	andi	r18, 0x07	; 7
 a64:	09 f4       	brne	.+2      	; 0xa68 <USB_Device_ProcessControlRequest+0xc2>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a66:	be c0       	rjmp	.+380    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 a68:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a6c:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a70:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 a72:	b8 c0       	rjmp	.+368    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 a74:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a78:	33 30       	cpi	r19, 0x03	; 3
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a7a:	11 f4       	brne	.+4      	; 0xa80 <USB_Device_ProcessControlRequest+0xda>
 a7c:	80 62       	ori	r24, 0x20	; 32
 a7e:	11 c0       	rjmp	.+34     	; 0xaa2 <USB_Device_ProcessControlRequest+0xfc>
 a80:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a82:	80 93 eb 00 	sts	0x00EB, r24
 a86:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	02 2e       	mov	r0, r18
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0xea>
 a8e:	88 0f       	add	r24, r24
 a90:	0a 94       	dec	r0
 a92:	ea f7       	brpl	.-6      	; 0xa8e <USB_Device_ProcessControlRequest+0xe8>
 a94:	80 93 ea 00 	sts	0x00EA, r24
 a98:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 a9c:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 aa0:	88 60       	ori	r24, 0x08	; 8
 aa2:	80 93 eb 00 	sts	0x00EB, r24
 aa6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aaa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aae:	87 7f       	andi	r24, 0xF7	; 247
 ab0:	7e c0       	rjmp	.+252    	; 0xbae <USB_Device_ProcessControlRequest+0x208>
 ab2:	21 11       	cpse	r18, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ab4:	a6 c0       	rjmp	.+332    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 ab6:	10 91 29 02 	lds	r17, 0x0229
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 aba:	80 91 e8 00 	lds	r24, 0x00E8
 abe:	87 7f       	andi	r24, 0xF7	; 247
 ac0:	80 93 e8 00 	sts	0x00E8, r24
 ac4:	0a dd       	rcall	.-1516   	; 0x4da <Endpoint_ClearStatusStage>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 ac6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 aca:	80 fd       	sbrc	r24, 0
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <USB_Device_ProcessControlRequest+0x130>
	
	while (!(Endpoint_IsINReady()))
 ace:	8e b3       	in	r24, 0x1e	; 30
 ad0:	81 11       	cpse	r24, r1
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 ad2:	f9 cf       	rjmp	.-14     	; 0xac6 <USB_Device_ProcessControlRequest+0x120>
 ad4:	87 c0       	rjmp	.+270    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 ad6:	81 2f       	mov	r24, r17
 ad8:	8f 77       	andi	r24, 0x7F	; 127
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 ada:	11 f0       	breq	.+4      	; 0xae0 <USB_Device_ProcessControlRequest+0x13a>
 adc:	93 e0       	ldi	r25, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x13c>
 ae0:	92 e0       	ldi	r25, 0x02	; 2
 ae2:	9e bb       	out	0x1e, r25	; 30
 ae4:	80 68       	ori	r24, 0x80	; 128
 ae6:	80 93 e3 00 	sts	0x00E3, r24
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 aea:	7c c0       	rjmp	.+248    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 aec:	20 58       	subi	r18, 0x80	; 128
 aee:	22 30       	cpi	r18, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 af0:	08 f0       	brcs	.+2      	; 0xaf4 <USB_Device_ProcessControlRequest+0x14e>
 af2:	87 c0       	rjmp	.+270    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 af4:	80 91 29 02 	lds	r24, 0x0229
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 af8:	90 91 2a 02 	lds	r25, 0x022A
 afc:	8c 3d       	cpi	r24, 0xDC	; 220
 afe:	23 e0       	ldi	r18, 0x03	; 3
 b00:	92 07       	cpc	r25, r18
 b02:	81 f5       	brne	.+96     	; 0xb64 <USB_Device_ProcessControlRequest+0x1be>
 b04:	83 e0       	ldi	r24, 0x03	; 3
 b06:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b08:	8a e2       	ldi	r24, 0x2A	; 42
 b0a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 b0c:	4f b7       	in	r20, 0x3f	; 63
 b0e:	f8 94       	cli
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 b10:	de 01       	movw	r26, r28
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 b12:	13 96       	adiw	r26, 0x03	; 3
 b14:	20 e0       	ldi	r18, 0x00	; 0
 b16:	3e e0       	ldi	r19, 0x0E	; 14
 b18:	51 e2       	ldi	r21, 0x21	; 33
 b1a:	e3 2f       	mov	r30, r19
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	50 93 57 00 	sts	0x0057, r21
 b22:	e4 91       	lpm	r30, Z
 b24:	20 ff       	sbrs	r18, 0
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <USB_Device_ProcessControlRequest+0x188>
			
			if (SerialCharNum & 0x01)
 b28:	e2 95       	swap	r30
 b2a:	ef 70       	andi	r30, 0x0F	; 15
			{
				SerialByte >>= 4;
 b2c:	3f 5f       	subi	r19, 0xFF	; 255
 b2e:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
 b30:	90 e3       	ldi	r25, 0x30	; 48
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
 b32:	9e 0f       	add	r25, r30
 b34:	9a 33       	cpi	r25, 0x3A	; 58
 b36:	10 f0       	brcs	.+4      	; 0xb3c <USB_Device_ProcessControlRequest+0x196>
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
 b38:	e9 5c       	subi	r30, 0xC9	; 201
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <USB_Device_ProcessControlRequest+0x198>
 b3c:	e9 2f       	mov	r30, r25
 b3e:	8e 2f       	mov	r24, r30
 b40:	90 e0       	ldi	r25, 0x00	; 0
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
 b42:	8d 93       	st	X+, r24
 b44:	9d 93       	st	X+, r25
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	24 31       	cpi	r18, 0x14	; 20
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 b4a:	39 f7       	brne	.-50     	; 0xb1a <USB_Device_ProcessControlRequest+0x174>
 b4c:	4f bf       	out	0x3f, r20	; 63
 b4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b52:	87 7f       	andi	r24, 0xF7	; 247
 b54:	80 93 e8 00 	sts	0x00E8, r24
 b58:	6a e2       	ldi	r22, 0x2A	; 42
 b5a:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b5c:	ce 01       	movw	r24, r28
 b5e:	01 96       	adiw	r24, 0x01	; 1
 b60:	08 dd       	rcall	.-1520   	; 0x572 <Endpoint_Write_Control_Stream_LE>
 b62:	11 c0       	rjmp	.+34     	; 0xb86 <USB_Device_ProcessControlRequest+0x1e0>
 b64:	ae 01       	movw	r20, r28
 b66:	4f 5f       	subi	r20, 0xFF	; 255
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b6a:	60 91 2b 02 	lds	r22, 0x022B
 b6e:	4e dc       	rcall	.-1892   	; 0x40c <CALLBACK_USB_GetDescriptor>
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	c1 f1       	breq	.+112    	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 b74:	20 91 e8 00 	lds	r18, 0x00E8
 b78:	27 7f       	andi	r18, 0xF7	; 247
 b7a:	20 93 e8 00 	sts	0x00E8, r18
 b7e:	bc 01       	movw	r22, r24
 b80:	89 81       	ldd	r24, Y+1	; 0x01
 b82:	9a 81       	ldd	r25, Y+2	; 0x02
 b84:	4d dd       	rcall	.-1382   	; 0x620 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 b86:	80 91 e8 00 	lds	r24, 0x00E8
 b8a:	8b 77       	andi	r24, 0x7B	; 123
 b8c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b90:	29 c0       	rjmp	.+82     	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 b92:	20 38       	cpi	r18, 0x80	; 128
 b94:	b1 f5       	brne	.+108    	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 b96:	80 91 e8 00 	lds	r24, 0x00E8
 b9a:	87 7f       	andi	r24, 0xF7	; 247
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba0:	80 91 25 02 	lds	r24, 0x0225
 ba4:	80 93 f1 00 	sts	0x00F1, r24
 ba8:	80 91 e8 00 	lds	r24, 0x00E8

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 bac:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 bae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bb2:	93 dc       	rcall	.-1754   	; 0x4da <Endpoint_ClearStatusStage>
 bb4:	17 c0       	rjmp	.+46     	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
 bb6:	21 11       	cpse	r18, r1
 bb8:	24 c0       	rjmp	.+72     	; 0xc02 <USB_Device_ProcessControlRequest+0x25c>
 bba:	90 91 29 02 	lds	r25, 0x0229
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bbe:	92 30       	cpi	r25, 0x02	; 2
 bc0:	88 f4       	brcc	.+34     	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bc2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bc6:	87 7f       	andi	r24, 0xF7	; 247
 bc8:	80 93 e8 00 	sts	0x00E8, r24
 bcc:	90 93 25 02 	sts	0x0225, r25
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd0:	84 dc       	rcall	.-1784   	; 0x4da <Endpoint_ClearStatusStage>
 bd2:	80 91 25 02 	lds	r24, 0x0225
 bd6:	88 23       	and	r24, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bd8:	11 f0       	breq	.+4      	; 0xbde <USB_Device_ProcessControlRequest+0x238>
 bda:	84 e0       	ldi	r24, 0x04	; 4

	Endpoint_ClearStatusStage();
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x23a>
 bde:	83 e0       	ldi	r24, 0x03	; 3

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 be0:	8e bb       	out	0x1e, r24	; 30
 be2:	83 db       	rcall	.-2298   	; 0x2ea <EVENT_USB_Device_ConfigurationChanged>
 be4:	80 91 e8 00 	lds	r24, 0x00E8
 be8:	83 ff       	sbrs	r24, 3
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <USB_Device_ProcessControlRequest+0x260>
 bec:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 bf0:	80 62       	ori	r24, 0x20	; 32
 bf2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bf6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 bfa:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bfc:	80 93 e8 00 	sts	0x00E8, r24
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <USB_Device_ProcessControlRequest+0x260>
 c02:	76 db       	rcall	.-2324   	; 0x2f0 <EVENT_USB_Device_UnhandledControlRequest>
 c04:	ef cf       	rjmp	.-34     	; 0xbe4 <USB_Device_ProcessControlRequest+0x23e>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c06:	aa 96       	adiw	r28, 0x2a	; 42
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	1f 91       	pop	r17
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 c18:	08 95       	ret

00000c1a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c1a:	08 95       	ret

00000c1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c1c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c1e:	8e b3       	in	r24, 0x1e	; 30
 c20:	88 23       	and	r24, r24
 c22:	59 f0       	breq	.+22     	; 0xc3a <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c24:	c0 91 e9 00 	lds	r28, 0x00E9
 c28:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c2a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c2e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c32:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c34:	b8 de       	rcall	.-656    	; 0x9a6 <USB_Device_ProcessControlRequest>
 c36:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c3a:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 c3c:	08 95       	ret

00000c3e <CDC_Device_Event_Stub>:
#define  __INCLUDE_FROM_CDC_CLASS_DEVICE_C
#define  __INCLUDE_FROM_CDC_DRIVER
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{
 c3e:	08 95       	ret

00000c40 <CDC_Device_ProcessControlRequest>:

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c40:	cf 93       	push	r28
 c42:	df 93       	push	r29
 c44:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c46:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 c4a:	83 ff       	sbrs	r24, 3
 c4c:	5f c0       	rjmp	.+190    	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 c4e:	88 81       	ld	r24, Y
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	20 91 2b 02 	lds	r18, 0x022B
 c56:	30 91 2c 02 	lds	r19, 0x022C
 c5a:	28 17       	cp	r18, r24
 c5c:	39 07       	cpc	r19, r25
 c5e:	09 f0       	breq	.+2      	; 0xc62 <CDC_Device_ProcessControlRequest+0x22>
 c60:	55 c0       	rjmp	.+170    	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
	  return;

	switch (USB_ControlRequest.bRequest)
 c62:	80 91 28 02 	lds	r24, 0x0228
 c66:	81 32       	cpi	r24, 0x21	; 33
 c68:	49 f0       	breq	.+18     	; 0xc7c <CDC_Device_ProcessControlRequest+0x3c>
 c6a:	18 f4       	brcc	.+6      	; 0xc72 <CDC_Device_ProcessControlRequest+0x32>
 c6c:	80 32       	cpi	r24, 0x20	; 32
 c6e:	c9 f0       	breq	.+50     	; 0xca2 <CDC_Device_ProcessControlRequest+0x62>
 c70:	4d c0       	rjmp	.+154    	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
 c72:	82 32       	cpi	r24, 0x22	; 34
 c74:	61 f1       	breq	.+88     	; 0xcce <CDC_Device_ProcessControlRequest+0x8e>
 c76:	83 32       	cpi	r24, 0x23	; 35
 c78:	c9 f1       	breq	.+114    	; 0xcec <CDC_Device_ProcessControlRequest+0xac>
 c7a:	48 c0       	rjmp	.+144    	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c7c:	80 91 27 02 	lds	r24, 0x0227
 c80:	81 3a       	cpi	r24, 0xA1	; 161
 c82:	09 f0       	breq	.+2      	; 0xc86 <CDC_Device_ProcessControlRequest+0x46>
 c84:	43 c0       	rjmp	.+134    	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c86:	80 91 e8 00 	lds	r24, 0x00E8
 c8a:	87 7f       	andi	r24, 0xF7	; 247
 c8c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 c90:	67 e0       	ldi	r22, 0x07	; 7
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	ce 01       	movw	r24, r28
 c96:	0f 96       	adiw	r24, 0x0f	; 15
 c98:	6c dc       	rcall	.-1832   	; 0x572 <Endpoint_Write_Control_Stream_LE>
 c9a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c9e:	8b 77       	andi	r24, 0x7B	; 123
 ca0:	13 c0       	rjmp	.+38     	; 0xcc8 <CDC_Device_ProcessControlRequest+0x88>
 ca2:	80 91 27 02 	lds	r24, 0x0227
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ca6:	81 32       	cpi	r24, 0x21	; 33
 ca8:	89 f5       	brne	.+98     	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
 caa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cae:	87 7f       	andi	r24, 0xF7	; 247
 cb0:	80 93 e8 00 	sts	0x00E8, r24
 cb4:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	ce 01       	movw	r24, r28
 cba:	0f 96       	adiw	r24, 0x0f	; 15
 cbc:	09 dd       	rcall	.-1518   	; 0x6d0 <Endpoint_Read_Control_Stream_LE>
 cbe:	ce 01       	movw	r24, r28
 cc0:	1a db       	rcall	.-2508   	; 0x2f6 <EVENT_CDC_Device_LineEncodingChanged>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 cc2:	80 91 e8 00 	lds	r24, 0x00E8
 cc6:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cc8:	80 93 e8 00 	sts	0x00E8, r24
 ccc:	1f c0       	rjmp	.+62     	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
 cce:	80 91 27 02 	lds	r24, 0x0227
 cd2:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cd4:	d9 f4       	brne	.+54     	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
 cd6:	80 91 e8 00 	lds	r24, 0x00E8
 cda:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cdc:	80 93 e8 00 	sts	0x00E8, r24
 ce0:	80 91 29 02 	lds	r24, 0x0229
 ce4:	8d 87       	std	Y+13, r24	; 0x0d
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ce6:	ce 01       	movw	r24, r28
 ce8:	89 db       	rcall	.-2286   	; 0x3fc <EVENT_CDC_Device_ControLineStateChanged>
 cea:	0d c0       	rjmp	.+26     	; 0xd06 <CDC_Device_ProcessControlRequest+0xc6>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 cec:	80 91 27 02 	lds	r24, 0x0227
 cf0:	81 32       	cpi	r24, 0x21	; 33
 cf2:	61 f4       	brne	.+24     	; 0xd0c <CDC_Device_ProcessControlRequest+0xcc>
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cf4:	80 91 e8 00 	lds	r24, 0x00E8
 cf8:	87 7f       	andi	r24, 0xF7	; 247
 cfa:	80 93 e8 00 	sts	0x00E8, r24
 cfe:	60 91 29 02 	lds	r22, 0x0229
 d02:	ce 01       	movw	r24, r28
 d04:	9c df       	rcall	.-200    	; 0xc3e <CDC_Device_Event_Stub>
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	e7 cb       	rjmp	.-2098   	; 0x4da <Endpoint_ClearStatusStage>
 d0c:	df 91       	pop	r29
 d0e:	cf 91       	pop	r28
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 d10:	08 95       	ret

00000d12 <CDC_Device_ConfigureEndpoints>:
 d12:	0f 93       	push	r16
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);

				Endpoint_ClearStatusStage();
 d14:	1f 93       	push	r17
 d16:	cf 93       	push	r28
			}

			break;
	}
}
 d18:	df 93       	push	r29
 d1a:	ec 01       	movw	r28, r24
 d1c:	fc 01       	movw	r30, r24

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 d1e:	3d 96       	adiw	r30, 0x0d	; 13
 d20:	89 e0       	ldi	r24, 0x09	; 9
 d22:	df 01       	movw	r26, r30
 d24:	1d 92       	st	X+, r1
 d26:	8a 95       	dec	r24
 d28:	e9 f7       	brne	.-6      	; 0xd24 <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 d2a:	2a 81       	ldd	r18, Y+2	; 0x02
 d2c:	3b 81       	ldd	r19, Y+3	; 0x03
 d2e:	8c 81       	ldd	r24, Y+4	; 0x04
 d30:	88 23       	and	r24, r24
 d32:	11 f0       	breq	.+4      	; 0xd38 <CDC_Device_ConfigureEndpoints+0x26>
 d34:	14 e0       	ldi	r17, 0x04	; 4
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <CDC_Device_ConfigureEndpoints+0x28>
 d38:	10 e0       	ldi	r17, 0x00	; 0
 d3a:	09 81       	ldd	r16, Y+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d3c:	c9 01       	movw	r24, r18
 d3e:	98 db       	rcall	.-2256   	; 0x470 <Endpoint_BytesToEPSizeMaskDynamic>
 d40:	41 2f       	mov	r20, r17
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d42:	48 2b       	or	r20, r24
 d44:	42 60       	ori	r20, 0x02	; 2
 d46:	61 e8       	ldi	r22, 0x81	; 129
 d48:	80 2f       	mov	r24, r16
 d4a:	a0 db       	rcall	.-2240   	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
 d4c:	88 23       	and	r24, r24
 d4e:	41 f1       	breq	.+80     	; 0xda0 <CDC_Device_ConfigureEndpoints+0x8e>
 d50:	2e 81       	ldd	r18, Y+6	; 0x06
 d52:	3f 81       	ldd	r19, Y+7	; 0x07
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 d54:	88 85       	ldd	r24, Y+8	; 0x08
 d56:	88 23       	and	r24, r24
 d58:	11 f0       	breq	.+4      	; 0xd5e <CDC_Device_ConfigureEndpoints+0x4c>
 d5a:	14 e0       	ldi	r17, 0x04	; 4
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <CDC_Device_ConfigureEndpoints+0x4e>
 d5e:	10 e0       	ldi	r17, 0x00	; 0
 d60:	0d 81       	ldd	r16, Y+5	; 0x05
 d62:	c9 01       	movw	r24, r18
 d64:	85 db       	rcall	.-2294   	; 0x470 <Endpoint_BytesToEPSizeMaskDynamic>
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d66:	41 2f       	mov	r20, r17
 d68:	48 2b       	or	r20, r24
 d6a:	42 60       	ori	r20, 0x02	; 2
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d6c:	60 e8       	ldi	r22, 0x80	; 128
 d6e:	80 2f       	mov	r24, r16
 d70:	8d db       	rcall	.-2278   	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
 d72:	88 23       	and	r24, r24
 d74:	a9 f0       	breq	.+42     	; 0xda0 <CDC_Device_ConfigureEndpoints+0x8e>
 d76:	2a 85       	ldd	r18, Y+10	; 0x0a
 d78:	3b 85       	ldd	r19, Y+11	; 0x0b
 d7a:	8c 85       	ldd	r24, Y+12	; 0x0c
 d7c:	88 23       	and	r24, r24
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
 d7e:	11 f0       	breq	.+4      	; 0xd84 <CDC_Device_ConfigureEndpoints+0x72>
 d80:	14 e0       	ldi	r17, 0x04	; 4
 d82:	01 c0       	rjmp	.+2      	; 0xd86 <CDC_Device_ConfigureEndpoints+0x74>
 d84:	10 e0       	ldi	r17, 0x00	; 0
 d86:	c9 85       	ldd	r28, Y+9	; 0x09
 d88:	c9 01       	movw	r24, r18
 d8a:	72 db       	rcall	.-2332   	; 0x470 <Endpoint_BytesToEPSizeMaskDynamic>
 d8c:	41 2f       	mov	r20, r17
 d8e:	48 2b       	or	r20, r24
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d90:	42 60       	ori	r20, 0x02	; 2
 d92:	61 ec       	ldi	r22, 0xC1	; 193
 d94:	8c 2f       	mov	r24, r28
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	1f 91       	pop	r17
 d9c:	0f 91       	pop	r16
 d9e:	76 cb       	rjmp	.-2324   	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
	{
		return false;
	}

	return true;
}
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	1f 91       	pop	r17
 da8:	0f 91       	pop	r16
 daa:	08 95       	ret

00000dac <CDC_Device_SendByte>:
 dac:	cf 93       	push	r28
 dae:	c6 2f       	mov	r28, r22
 db0:	2e b3       	in	r18, 0x1e	; 30
 db2:	24 30       	cpi	r18, 0x04	; 4
 db4:	e9 f4       	brne	.+58     	; 0xdf0 <CDC_Device_SendByte+0x44>
 db6:	fc 01       	movw	r30, r24
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 db8:	47 85       	ldd	r20, Z+15	; 0x0f
 dba:	50 89       	ldd	r21, Z+16	; 0x10
 dbc:	61 89       	ldd	r22, Z+17	; 0x11
 dbe:	72 89       	ldd	r23, Z+18	; 0x12
 dc0:	45 2b       	or	r20, r21
 dc2:	46 2b       	or	r20, r22
 dc4:	47 2b       	or	r20, r23
 dc6:	a1 f0       	breq	.+40     	; 0xdf0 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 dc8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dce:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 dd2:	85 ff       	sbrs	r24, 5
 dd4:	04 c0       	rjmp	.+8      	; 0xdde <CDC_Device_SendByte+0x32>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 dd6:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 dda:	80 e0       	ldi	r24, 0x00	; 0
 ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dde:	80 91 e8 00 	lds	r24, 0x00E8
 de2:	8e 77       	andi	r24, 0x7E	; 126
 de4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 de8:	97 db       	rcall	.-2258   	; 0x518 <Endpoint_WaitUntilReady>
 dea:	88 23       	and	r24, r24
 dec:	a1 f3       	breq	.-24     	; 0xdd6 <CDC_Device_SendByte+0x2a>
 dee:	01 c0       	rjmp	.+2      	; 0xdf2 <CDC_Device_SendByte+0x46>
 df0:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 df2:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 df4:	08 95       	ret

00000df6 <CDC_Device_Flush>:
 df6:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 df8:	24 30       	cpi	r18, 0x04	; 4
 dfa:	19 f5       	brne	.+70     	; 0xe42 <CDC_Device_Flush+0x4c>
 dfc:	fc 01       	movw	r30, r24
 dfe:	47 85       	ldd	r20, Z+15	; 0x0f
 e00:	50 89       	ldd	r21, Z+16	; 0x10
 e02:	61 89       	ldd	r22, Z+17	; 0x11
 e04:	72 89       	ldd	r23, Z+18	; 0x12
 e06:	45 2b       	or	r20, r21
 e08:	46 2b       	or	r20, r22
 e0a:	47 2b       	or	r20, r23
 e0c:	d1 f0       	breq	.+52     	; 0xe42 <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e0e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e10:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 e14:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
 e18:	88 23       	and	r24, r24
 e1a:	89 f0       	breq	.+34     	; 0xe3e <CDC_Device_Flush+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e1c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e20:	80 91 e8 00 	lds	r24, 0x00E8
 e24:	8e 77       	andi	r24, 0x7E	; 126
 e26:	80 93 e8 00 	sts	0x00E8, r24
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
 e2a:	95 fd       	sbrc	r25, 5
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <CDC_Device_Flush+0x48>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e2e:	74 db       	rcall	.-2328   	; 0x518 <Endpoint_WaitUntilReady>
 e30:	81 11       	cpse	r24, r1
 e32:	08 c0       	rjmp	.+16     	; 0xe44 <CDC_Device_Flush+0x4e>
 e34:	80 91 e8 00 	lds	r24, 0x00E8
 e38:	8e 77       	andi	r24, 0x7E	; 126
 e3a:	80 93 e8 00 	sts	0x00E8, r24
 e3e:	80 e0       	ldi	r24, 0x00	; 0
 e40:	08 95       	ret
 e42:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e44:	08 95       	ret

00000e46 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
 e46:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e48:	24 30       	cpi	r18, 0x04	; 4
 e4a:	51 f4       	brne	.+20     	; 0xe60 <CDC_Device_USBTask+0x1a>
 e4c:	fc 01       	movw	r30, r24
 e4e:	47 85       	ldd	r20, Z+15	; 0x0f
 e50:	50 89       	ldd	r21, Z+16	; 0x10
 e52:	61 89       	ldd	r22, Z+17	; 0x11
 e54:	72 89       	ldd	r23, Z+18	; 0x12
 e56:	45 2b       	or	r20, r21
 e58:	46 2b       	or	r20, r22
 e5a:	47 2b       	or	r20, r23
 e5c:	09 f0       	breq	.+2      	; 0xe60 <CDC_Device_USBTask+0x1a>
	  return;
	  
	CDC_Device_Flush(CDCInterfaceInfo);
 e5e:	cb cf       	rjmp	.-106    	; 0xdf6 <CDC_Device_Flush>
 e60:	08 95       	ret

00000e62 <CDC_Device_ReceiveByte>:
 e62:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e64:	24 30       	cpi	r18, 0x04	; 4
 e66:	19 f0       	breq	.+6      	; 0xe6e <CDC_Device_ReceiveByte+0xc>
	  return -1;
 e68:	8f ef       	ldi	r24, 0xFF	; 255
 e6a:	9f ef       	ldi	r25, 0xFF	; 255
 e6c:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e6e:	fc 01       	movw	r30, r24
 e70:	47 85       	ldd	r20, Z+15	; 0x0f
 e72:	50 89       	ldd	r21, Z+16	; 0x10
 e74:	61 89       	ldd	r22, Z+17	; 0x11
 e76:	72 89       	ldd	r23, Z+18	; 0x12
 e78:	45 2b       	or	r20, r21
 e7a:	46 2b       	or	r20, r22
 e7c:	47 2b       	or	r20, r23
 e7e:	a1 f3       	breq	.-24     	; 0xe68 <CDC_Device_ReceiveByte+0x6>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 e80:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e82:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e86:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
 e8a:	82 ff       	sbrs	r24, 2
 e8c:	ed cf       	rjmp	.-38     	; 0xe68 <CDC_Device_ReceiveByte+0x6>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 e8e:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 e92:	88 23       	and	r24, r24
 e94:	21 f0       	breq	.+8      	; 0xe9e <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 e96:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 e9a:	30 e0       	ldi	r19, 0x00	; 0
 e9c:	02 c0       	rjmp	.+4      	; 0xea2 <CDC_Device_ReceiveByte+0x40>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 e9e:	2f ef       	ldi	r18, 0xFF	; 255
 ea0:	3f ef       	ldi	r19, 0xFF	; 255
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 ea2:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
 ea6:	81 11       	cpse	r24, r1
 ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 eaa:	80 91 e8 00 	lds	r24, 0x00E8
 eae:	8b 77       	andi	r24, 0x7B	; 123
 eb0:	80 93 e8 00 	sts	0x00E8, r24
 eb4:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
 eb6:	08 95       	ret

00000eb8 <__udivmodsi4>:
 eb8:	a1 e2       	ldi	r26, 0x21	; 33
 eba:	1a 2e       	mov	r1, r26
 ebc:	aa 1b       	sub	r26, r26
 ebe:	bb 1b       	sub	r27, r27
 ec0:	fd 01       	movw	r30, r26
 ec2:	0d c0       	rjmp	.+26     	; 0xede <__udivmodsi4_ep>

00000ec4 <__udivmodsi4_loop>:
 ec4:	aa 1f       	adc	r26, r26
 ec6:	bb 1f       	adc	r27, r27
 ec8:	ee 1f       	adc	r30, r30
 eca:	ff 1f       	adc	r31, r31
 ecc:	a2 17       	cp	r26, r18
 ece:	b3 07       	cpc	r27, r19
 ed0:	e4 07       	cpc	r30, r20
 ed2:	f5 07       	cpc	r31, r21
 ed4:	20 f0       	brcs	.+8      	; 0xede <__udivmodsi4_ep>
 ed6:	a2 1b       	sub	r26, r18
 ed8:	b3 0b       	sbc	r27, r19
 eda:	e4 0b       	sbc	r30, r20
 edc:	f5 0b       	sbc	r31, r21

00000ede <__udivmodsi4_ep>:
 ede:	66 1f       	adc	r22, r22
 ee0:	77 1f       	adc	r23, r23
 ee2:	88 1f       	adc	r24, r24
 ee4:	99 1f       	adc	r25, r25
 ee6:	1a 94       	dec	r1
 ee8:	69 f7       	brne	.-38     	; 0xec4 <__udivmodsi4_loop>
 eea:	60 95       	com	r22
 eec:	70 95       	com	r23
 eee:	80 95       	com	r24
 ef0:	90 95       	com	r25
 ef2:	9b 01       	movw	r18, r22
 ef4:	ac 01       	movw	r20, r24
 ef6:	bd 01       	movw	r22, r26
 ef8:	cf 01       	movw	r24, r30
 efa:	08 95       	ret

00000efc <__tablejump2__>:
 efc:	ee 0f       	add	r30, r30
 efe:	ff 1f       	adc	r31, r31

00000f00 <__tablejump__>:
 f00:	05 90       	lpm	r0, Z+
 f02:	f4 91       	lpm	r31, Z
 f04:	e0 2d       	mov	r30, r0
 f06:	09 94       	ijmp

00000f08 <_exit>:
 f08:	f8 94       	cli

00000f0a <__stop_program>:
 f0a:	ff cf       	rjmp	.-2      	; 0xf0a <__stop_program>
