   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /* On some devices, there is a factory set internal serial number which can be automatically sent t
  41:Descriptors.c ****  * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_I
  42:Descriptors.c ****  * This allows the host to track a device across insertions on different ports, allowing them to re
  43:Descriptors.c ****  * resources like COM port numbers and drivers. On demos using this feature, give a warning on unsu
  44:Descriptors.c ****  * so that the user can supply their own serial number descriptor instead or remove the USE_INTERNA
  45:Descriptors.c ****  * from the Device Descriptor (forcing the host to generate a serial number for each device from th
  46:Descriptors.c ****  * port location).
  47:Descriptors.c ****  */
  48:Descriptors.c **** #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  49:Descriptors.c **** 	#warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device ser
  50:Descriptors.c **** #endif
  51:Descriptors.c **** 
  52:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  53:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  54:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  55:Descriptors.c ****  *  process begins.
  56:Descriptors.c ****  */
  57:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  58:Descriptors.c **** {
  59:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  60:Descriptors.c **** 		
  61:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  62:Descriptors.c **** 	.Class                  = 0x02,
  63:Descriptors.c **** 	.SubClass               = 0x00,
  64:Descriptors.c **** 	.Protocol               = 0x00,
  65:Descriptors.c **** 				
  66:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  67:Descriptors.c **** 		
  68:Descriptors.c **** 	.VendorID               = 0x16D0, // Apio
  69:Descriptors.c **** 	.ProductID          	  = 0x0A5E, // (CHANGE ALSO IN descriptor.h: APIO_PID) Apio USB-to-serial pro
  70:Descriptors.c **** 	.ReleaseNumber          = 0x0001,
  71:Descriptors.c **** 		
  72:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  73:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  74:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  75:Descriptors.c **** 		
  76:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  77:Descriptors.c **** };
  78:Descriptors.c **** 
  79:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  80:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  81:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  82:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  83:Descriptors.c ****  */
  84:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  85:Descriptors.c **** {
  86:Descriptors.c **** 	.Config = 
  87:Descriptors.c **** 		{
  88:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  89:Descriptors.c **** 
  90:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  91:Descriptors.c **** 			.TotalInterfaces        = 2,
  92:Descriptors.c **** 				
  93:Descriptors.c **** 			.ConfigurationNumber    = 1,
  94:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  95:Descriptors.c **** 				
  96:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  97:Descriptors.c **** 			
  98:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(500)
  99:Descriptors.c **** 		},
 100:Descriptors.c **** 		
 101:Descriptors.c **** 	.CDC_CCI_Interface = 
 102:Descriptors.c **** 		{
 103:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 104:Descriptors.c **** 
 105:Descriptors.c **** 			.InterfaceNumber        = 0,
 106:Descriptors.c **** 			.AlternateSetting       = 0,
 107:Descriptors.c **** 			
 108:Descriptors.c **** 			.TotalEndpoints         = 1,
 109:Descriptors.c **** 				
 110:Descriptors.c **** 			.Class                  = 0x02,
 111:Descriptors.c **** 			.SubClass               = 0x02,
 112:Descriptors.c **** 			.Protocol               = 0x01,
 113:Descriptors.c **** 				
 114:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 115:Descriptors.c **** 		},
 116:Descriptors.c **** 
 117:Descriptors.c **** 	.CDC_Functional_IntHeader = 
 118:Descriptors.c **** 		{
 119:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 120:Descriptors.c **** 			.SubType                = 0x00,
 121:Descriptors.c **** 			
 122:Descriptors.c **** 			.Data                   = {0x01, 0x10}
 123:Descriptors.c **** 		},
 124:Descriptors.c **** 
 125:Descriptors.c **** 	.CDC_Functional_AbstractControlManagement = 
 126:Descriptors.c **** 		{
 127:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(1)), .Type = 0x24},
 128:Descriptors.c **** 			.SubType                = 0x02,
 129:Descriptors.c **** 			
 130:Descriptors.c **** 			.Data                   = {0x06}
 131:Descriptors.c **** 		},
 132:Descriptors.c **** 		
 133:Descriptors.c **** 	.CDC_Functional_Union = 
 134:Descriptors.c **** 		{
 135:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 136:Descriptors.c **** 			.SubType                = 0x06,
 137:Descriptors.c **** 			
 138:Descriptors.c **** 			.Data                   = {0x00, 0x01}
 139:Descriptors.c **** 		},
 140:Descriptors.c **** 
 141:Descriptors.c **** 	.CDC_NotificationEndpoint = 
 142:Descriptors.c **** 		{
 143:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 144:Descriptors.c **** 			
 145:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 146:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 147:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 148:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 149:Descriptors.c **** 		},
 150:Descriptors.c **** 
 151:Descriptors.c **** 	.CDC_DCI_Interface = 
 152:Descriptors.c **** 		{
 153:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 154:Descriptors.c **** 
 155:Descriptors.c **** 			.InterfaceNumber        = 1,
 156:Descriptors.c **** 			.AlternateSetting       = 0,
 157:Descriptors.c **** 			
 158:Descriptors.c **** 			.TotalEndpoints         = 2,
 159:Descriptors.c **** 				
 160:Descriptors.c **** 			.Class                  = 0x0A,
 161:Descriptors.c **** 			.SubClass               = 0x00,
 162:Descriptors.c **** 			.Protocol               = 0x00,
 163:Descriptors.c **** 				
 164:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 165:Descriptors.c **** 		},
 166:Descriptors.c **** 
 167:Descriptors.c **** 	.CDC_DataOutEndpoint = 
 168:Descriptors.c **** 		{
 169:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 170:Descriptors.c **** 			
 171:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 172:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 173:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 174:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 175:Descriptors.c **** 		},
 176:Descriptors.c **** 		
 177:Descriptors.c **** 	.CDC_DataInEndpoint = 
 178:Descriptors.c **** 		{
 179:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 180:Descriptors.c **** 			
 181:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 182:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 183:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 184:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 185:Descriptors.c **** 		}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 189:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 190:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 195:Descriptors.c **** 		
 196:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 197:Descriptors.c **** };
 198:Descriptors.c **** 
 199:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 200:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 201:Descriptors.c ****  *  Descriptor.
 202:Descriptors.c ****  */
 203:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 204:Descriptors.c **** {
 205:Descriptors.c ****   #if (ARDUINO_MODEL_PID == APIO_PID)
 206:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(27), .Type = DTYPE_String},
 207:Descriptors.c **** 
 208:Descriptors.c ****   	.UnicodeString          = L"Apio(http://www.apio.cc)"
 209:Descriptors.c **** 	#else
 210:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 211:Descriptors.c **** 
 212:Descriptors.c ****   	.UnicodeString          = L"Apio Dongle"
 213:Descriptors.c **** 	#endif
 214:Descriptors.c **** };
 215:Descriptors.c **** 
 216:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 217:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 218:Descriptors.c ****  *  Descriptor.
 219:Descriptors.c ****  */
 220:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 221:Descriptors.c **** {
 222:Descriptors.c **** 	#if (ARDUINO_MODEL_PID == ARDUINO_UNO_PID)
 223:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 224:Descriptors.c **** 			
 225:Descriptors.c **** 		.UnicodeString          = L"Arduino Uno"
 226:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == ARDUINO_MEGA2560_PID)
 227:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 228:Descriptors.c **** 			
 229:Descriptors.c **** 		.UnicodeString          = L"Arduino Mega 2560"
 230:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == APIO_PID)
 231:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(8), .Type = DTYPE_String},
 232:Descriptors.c **** 
 233:Descriptors.c **** 		.UnicodeString          = L"Apio Dongle"
 234:Descriptors.c **** 	#endif
 235:Descriptors.c **** 	
 236:Descriptors.c **** };
 237:Descriptors.c **** 
 238:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 239:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 240:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 241:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 242:Descriptors.c ****  *  USB host.
 243:Descriptors.c ****  */
 244:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 245:Descriptors.c ****                                     const uint8_t wIndex,
 246:Descriptors.c ****                                     void** const DescriptorAddress)
 247:Descriptors.c **** {
  16               		.loc 1 247 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 248:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 248 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 249:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 250:Descriptors.c **** 
 251:Descriptors.c **** 	void*    Address = NULL;
 252:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 253:Descriptors.c **** 
 254:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 254 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L11
 255:Descriptors.c **** 	{
 256:Descriptors.c **** 		case DTYPE_Device: 
 257:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 258:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 258 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 257:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
  40               		.loc 1 257 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L5
  44               	.LVL2:
  45               	.L3:
 259:Descriptors.c **** 			break;
 260:Descriptors.c **** 		case DTYPE_Configuration: 
 261:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 262:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 262 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 261:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
  50               		.loc 1 261 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 263:Descriptors.c **** 			break;
  53               		.loc 1 263 0
  54 0028 00C0      		rjmp .L5
  55               	.LVL4:
  56               	.L4:
  57 002a 9927      		clr r25
  58               	.LVL5:
 264:Descriptors.c **** 		case DTYPE_String: 
 265:Descriptors.c **** 			switch (DescriptorNumber)
  59               		.loc 1 265 0
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 8230      		cpi r24,2
  64 0034 9105      		cpc r25,__zero_reg__
  65 0036 01F0      		breq .L7
  66 0038 892B      		or r24,r25
  67 003a 01F4      		brne .L11
  68               	.LVL6:
  69               	.LBB2:
 266:Descriptors.c **** 			{
 267:Descriptors.c **** 				case 0x00: 
 268:Descriptors.c **** 					Address = (void*)&LanguageString;
 269:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  70               		.loc 1 269 0
  71 003c E0E0      		ldi r30,lo8(LanguageString)
  72 003e F0E0      		ldi r31,hi8(LanguageString)
  73 0040 00C0      		rjmp .L12
  74               	.LVL7:
  75               	.L6:
  76               	.LBE2:
  77               	.LBB3:
 270:Descriptors.c **** 					break;
 271:Descriptors.c **** 				case 0x01: 
 272:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 273:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  78               		.loc 1 273 0
  79 0042 E0E0      		ldi r30,lo8(ManufacturerString)
  80 0044 F0E0      		ldi r31,hi8(ManufacturerString)
  81 0046 00C0      		rjmp .L12
  82               	.LVL8:
  83               	.L7:
  84               	.LBE3:
  85               	.LBB4:
 274:Descriptors.c **** 					break;
 275:Descriptors.c **** 				case 0x02: 
 276:Descriptors.c **** 					Address = (void*)&ProductString;
 277:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  86               		.loc 1 277 0
  87 0048 E0E0      		ldi r30,lo8(ProductString)
  88 004a F0E0      		ldi r31,hi8(ProductString)
  89               	.LVL9:
  90               	.L12:
  91               	/* #APP */
  92               	 ;  277 "Descriptors.c" 1
  93 004c 8491      		lpm r24, Z
  94               		
  95               	 ;  0 "" 2
  96               	.LVL10:
  97               	/* #NOAPP */
  98               	.LBE4:
  99 004e 90E0      		ldi r25,0
 100               	.LVL11:
 276:Descriptors.c **** 					Address = (void*)&ProductString;
 101               		.loc 1 276 0
 102 0050 9F01      		movw r18,r30
 278:Descriptors.c **** 					break;
 103               		.loc 1 278 0
 104 0052 00C0      		rjmp .L5
 105               	.LVL12:
 106               	.L11:
 252:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 107               		.loc 1 252 0
 108 0054 80E0      		ldi r24,0
 109 0056 90E0      		ldi r25,0
 251:Descriptors.c **** 	void*    Address = NULL;
 110               		.loc 1 251 0
 111 0058 20E0      		ldi r18,0
 112 005a 30E0      		ldi r19,0
 113               	.LVL13:
 114               	.L5:
 279:Descriptors.c **** 			}
 280:Descriptors.c **** 			
 281:Descriptors.c **** 			break;
 282:Descriptors.c **** 	}
 283:Descriptors.c **** 	
 284:Descriptors.c **** 	*DescriptorAddress = Address;
 115               		.loc 1 284 0
 116 005c FA01      		movw r30,r20
 117 005e 3183      		std Z+1,r19
 118 0060 2083      		st Z,r18
 285:Descriptors.c **** 	return Size;
 286:Descriptors.c **** }
 119               		.loc 1 286 0
 120 0062 0895      		ret
 121               		.cfi_endproc
 122               	.LFE66:
 124               	.global	ProductString
 125               		.section	.progmem.data,"a",@progbits
 128               	ProductString:
 129 0000 0000      		.zero	2
 130               	.global	ManufacturerString
 133               	ManufacturerString:
 134 0002 18        		.byte	24
 135 0003 03        		.byte	3
 136 0004 4100      		.string	"A"
 137 0006 7000      		.string	"p"
 138 0008 6900      		.string	"i"
 139 000a 6F00      		.string	"o"
 140 000c 2000      		.string	" "
 141 000e 4400      		.string	"D"
 142 0010 6F00      		.string	"o"
 143 0012 6E00      		.string	"n"
 144 0014 6700      		.string	"g"
 145 0016 6C00      		.string	"l"
 146 0018 6500      		.string	"e"
 147 001a 00        		.string	""
 148 001b 00        		.string	""
 149               	.global	LanguageString
 152               	LanguageString:
 153 001c 04        		.byte	4
 154 001d 03        		.byte	3
 155 001e 0904      		.word	1033
 156               	.global	ConfigurationDescriptor
 159               	ConfigurationDescriptor:
 160 0020 09        		.byte	9
 161 0021 02        		.byte	2
 162 0022 3E00      		.word	62
 163 0024 02        		.byte	2
 164 0025 01        		.byte	1
 165 0026 00        		.byte	0
 166 0027 C0        		.byte	-64
 167 0028 FA        		.byte	-6
 168 0029 09        		.byte	9
 169 002a 04        		.byte	4
 170 002b 00        		.byte	0
 171 002c 00        		.byte	0
 172 002d 01        		.byte	1
 173 002e 02        		.byte	2
 174 002f 02        		.byte	2
 175 0030 01        		.byte	1
 176 0031 00        		.byte	0
 177 0032 05        		.byte	5
 178 0033 24        		.byte	36
 179 0034 00        		.byte	0
 180 0035 01        		.byte	1
 181 0036 10        		.byte	16
 182 0037 04        		.byte	4
 183 0038 24        		.byte	36
 184 0039 02        		.byte	2
 185 003a 06        		.byte	6
 186 003b 05        		.byte	5
 187 003c 24        		.byte	36
 188 003d 06        		.byte	6
 189 003e 00        		.byte	0
 190 003f 01        		.byte	1
 191 0040 07        		.byte	7
 192 0041 05        		.byte	5
 193 0042 82        		.byte	-126
 194 0043 03        		.byte	3
 195 0044 0800      		.word	8
 196 0046 FF        		.byte	-1
 197 0047 09        		.byte	9
 198 0048 04        		.byte	4
 199 0049 01        		.byte	1
 200 004a 00        		.byte	0
 201 004b 02        		.byte	2
 202 004c 0A        		.byte	10
 203 004d 00        		.byte	0
 204 004e 00        		.byte	0
 205 004f 00        		.byte	0
 206 0050 07        		.byte	7
 207 0051 05        		.byte	5
 208 0052 04        		.byte	4
 209 0053 02        		.byte	2
 210 0054 4000      		.word	64
 211 0056 01        		.byte	1
 212 0057 07        		.byte	7
 213 0058 05        		.byte	5
 214 0059 83        		.byte	-125
 215 005a 02        		.byte	2
 216 005b 4000      		.word	64
 217 005d 01        		.byte	1
 218               	.global	DeviceDescriptor
 221               	DeviceDescriptor:
 222 005e 12        		.byte	18
 223 005f 01        		.byte	1
 224 0060 1001      		.word	272
 225 0062 02        		.byte	2
 226 0063 00        		.byte	0
 227 0064 00        		.byte	0
 228 0065 08        		.byte	8
 229 0066 D016      		.word	5840
 230 0068 5E0A      		.word	2654
 231 006a 0100      		.word	1
 232 006c 01        		.byte	1
 233 006d 02        		.byte	2
 234 006e DC        		.byte	-36
 235 006f 01        		.byte	1
 236               		.text
 237               	.Letext0:
 238               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 239               		.file 3 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 240               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 241               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:2      *ABS*:0000003e __SP_H__
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:3      *ABS*:0000003d __SP_L__
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:4      *ABS*:0000003f __SREG__
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:6      *ABS*:00000001 __zero_reg__
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:221    .progmem.data:0000005e DeviceDescriptor
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:159    .progmem.data:00000020 ConfigurationDescriptor
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:152    .progmem.data:0000001c LanguageString
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:133    .progmem.data:00000002 ManufacturerString
/var/folders/18/rdz789l96db4t3nzhy2qwsp00000gn/T//cceL5y12.s:128    .progmem.data:00000000 ProductString

NO UNDEFINED SYMBOLS
